akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"

    # filter the log events using the back-end configuration (e.g. logback.xml) before they are published to the event bus.
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-dead-letters-during-shutdown = off
}

echo {
    internal-timeout = 5 # seconds
    gateway {
        host = "localhost"
        port = 3030
        secret-key = "secret"
        secret-key = ${?SECRET_KEY}
        default-page = 1
        default-size = 20
        breaker-call-timeout = 5   # seconds
        breaker-reset-timeout = 10 # seconds
        dispatcher {
            type = Dispatcher
            executor = "thread-pool-executor"
            thread-pool-executor {
                fixed-pool-size = 8
            }
            throughput = 100
        }
    }
    index {
        store-count = 1
        commit-interval = 3 # seconds
        #lucene-path = "/Users/max/volumes/echo/index"
        create-index = false
        dispatcher {
            mailbox-type = "echo.actor.index.IndexStorePriorityActorMailbox"
            type = Dispatcher
            executor = "thread-pool-executor"
            thread-pool-executor {
                fixed-pool-size = 2
            }
            throughput = 100
        }
    }
    crawler {
        worker-count = 5
        website-jobs = false # if false, such jobs will be ignored
        dispatcher {
            mailbox-type = "echo.actor.crawler.CrawlerPriorityActorMailbox"
            type = Dispatcher
            executor = "thread-pool-executor"
            thread-pool-executor {
                fixed-pool-size = 10
            }
            #executor = "fork-join-executor"
            #fork-join-executor {
            #    parallelism-min = 4
            #    parallelism-factor = 2.0
            #    parallelism-max = 16
            #}
            throughput = 5
        }
    }
    directory {
        store-count = 1
        worker-count = 5
        default-page = 0
        default-size = 24
        max-page-size = 10000
        dispatcher {
            mailbox-type = "echo.actor.directory.DirectoryPriorityActorMailbox"
            type = Dispatcher
            executor = "fork-join-executor"
            fork-join-executor {
                parallelism-min = 4
                parallelism-factor = 2.0
                parallelism-max = 16
            }
            throughput = 5
        }
    }
    parser {
        worker-count = 2
        dispatcher {
            mailbox-type = "echo.actor.parser.ParserPriorityActorMailbox"
            type = Dispatcher
            executor = "thread-pool-executor"
            thread-pool-executor {
                fixed-pool-size = 2
            }
            throughput = 5
        }
    }
    cli {
        dispatcher {
            type = PinnedDispatcher
            executor = "thread-pool-executor"
            thread-pool-executor {
                fixed-pool-size = 1
            }
            throughput = 1
        }
    }
    searcher {
        dispatcher {
            type = Dispatcher
            executor = "fork-join-executor"
            fork-join-executor {
                parallelism-min = 2
                parallelism-factor = 2.0
                parallelism-max = 8
            }
            throughput = 1
        }
    }
}

