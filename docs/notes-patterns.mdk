[INCLUDE=style/marticle]

Title        : Patterns

Bibliography : dipl
Bib style    : alpha
Cite All     : False

# Service-oriented architecture

* siehe https://en.wikipedia.org/wiki/Service-oriented_architecture
    * TODO: guter überblick über bereits gelesenes

# Event-driven architecture

* siehe https://en.wikipedia.org/wiki/Event-driven_architecture
    * "Event-driven architecture (EDA), is a software architecture pattern promoting the production, detection, consumption of, and reaction to events."
    * An event can be defined as "a significant change in state".[1] For example, when a consumer purchases a car, the car's state changes from "for sale" to "sold".
    * Events do not travel, they just occur. However, the term event is often used metonymically to denote the notification message itself, which may lead to some confusion
    * This is due to Event-Driven architectures often being design atop message-driven architectures, where such communication pattern requires one of the inputs to be text-only, the message, to differentiate how each communication should be handled.
    * This architectural pattern may be applied by the design and implementation of applications and systems that transmit events among loosely coupled software components and services
    * An event-driven system typically consists of event emitters (or agents), event consumers (or sinks), and event channels
    * Emitters have the responsibility to detect, gather, and transfer events. An Event Emitter does not know the consumers of the event, it does not even know if a consumer exists, and in case it exists, it does not know how the event is used or further processed [beim REST based MS gar nicht der Fall, bei Space/MsgQueue zB schon möglich]{.mind}
    * Sinks have the responsibility of applying a reaction as soon as an event is presented. The reaction might or might not be completely provided by the sink itself
    * The knowledge of the correct distribution of events is exclusively present within the event channel. The physical implementation of event channels can be based on traditional components such as message-oriented middleware or point-to-point communication [bei REST ist das mit dem knowledge of correct distribution auch nur bedingt so]{.mind}
    * Event-driven architecture can complement service-oriented architecture (SOA) because services can be activated by triggers fired on incoming events.[2][3] This paradigm is particularly useful whenever the sink does not provide any self-contained executive
    * SOA 2.0 evolves the implications SOA and EDA architectures provide to a richer, more robust level by leveraging previously unknown causal relationships to form a new event pattern

# Space-based architecture

* siehe https://en.wikipedia.org/wiki/Space-based_architecture