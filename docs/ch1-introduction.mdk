
Introduction
============



~ Epigraph { caption: "Peter Landin"}
Most papers in computer science describe how their author learned what someone else already knew.
~

<!--
~ Epigraph { caption: "Terry Winograd"}
The main activity of programming is not the origination of new independent programs, but in the integration, modification, and explanation of existing ones.
~

~ Epigraph { caption: "Ellen Ullman"}
We build our computer (systems) the way we build our cities: over time, without a plan, on top of ruins.
~

~ Epigraph { caption: "Butler Lampson"}
I think the computer is the world's greatest toy. You can invent wonderful things and actually make them happen.
~

~ Epigraph { caption: "Pamela Zave"}
The purpose of software engineering is to control complexity, not to create it.
~

~ Epigraph { caption: "Unknown"}
Distributed is truely concurrent
~
-->

~ todo
Hier ein paar ganz allgemein einführende Worte
~

~ begin green

The world is concurrent. [etwas sehr allgemeiner blabla und 1, 2 beispiele aus der echten welt]{.important}.

... As such, the idea of simultaneous actions has not been absent from the domain of computer programming. In this thesis, we will therefore take a close look at two concepts both introducing notions of concurrency into programs and/or systems, respectively the *Actor Model* of Computation and the *Microservice* Architectural Style.

~ end green


## Problem Statement

Draoni *et al.*\ [@Dra17a] point out that there is yet a gap in the literature emphasizing the connections of the domains of Actor model and Microservices. This work is aiming to fill this gap, regarding a focus on the specific arc of concurrent programming through these concepts.

~ todo
Hier noch 1-2 verbindende Sätze.
~

Therefore, we want to address the following research question:

> __RQ__: *How is the Actor Model comparing against the Microservice Paradigm regarding their properties and capabilities for programming concurrent systems?*

---

> __RQ1__: *What are the component idioms of Actors and Microservices?*

> __RQ2__: *What are the concurrent capabilities of Actors and Microservices?*

> __RQ3__: *How do Actors compare against Microservices?*

* What are the interrelations between actor features/primitives and microservice features/primitives

* 1 MS mit X worker-threads ?= X actors on thread-pool with X threads

* 2 MS mit X/2 worker-threads ?= X actors on thread-pool with X threads

## Aim and Scope of the Work

~ todo
Hier soll kurz Erklärt werden worum es mir bei der Erarbeitung der Antwort auf die Forschungsfrage geht. Vor allem soll auch abgegrenzt werden wieso es praktische Implementierungen gibt und welchen Zweck diese erfüllen, d.h. dass diese nicht auf ihre Leistung bzgl. der Domäne evaluiert werden.
~

~ begin green

...

The goal of this work is to provide an

~LitNote
- Clear separation between search engine and domain specific tasks (writing to index and search, fetching and parsing feeds, etc) and the communication and coordination specific parts (actors architecture and microservice architecture). Therefore a core library was developed for the first, and for the second "only" backends utilizing this lib was needed. It allows easy analysis/argumentation about the concurrent programming vs MSA aspect of the thesis, because all test scenario specific parts are part of core-lib, and could therefore be replaced by other domain specific code or non-search engine code

Important that core-lib does not introduce any own concurrent aspect, all concurrency should be done via actors/microservices

* core-lib is for demonstration
* actor-backend and microservice-backend are for scientific work
* will not focus on any specific search engine improvement
~

~ end green

...

We are conducting a *conceptual* analysis and will therefore refrain from giving formal definitions of all concepts, which would tend to become rather excessive. Instead, we confine on describing the concept semantics in an informal way sufficient for comparative evaluation.

## Methodological Approach

~ todo
Hier einen kurzen Überblick über die Arbeitsweise, ähnlich der Darlegung die bereits im Expose gegeben wurde.
~

* Literature review; Identify core principle of each programming model.
* Define a scenario for concurrent system. Develop two scenario implementation using actor- and microservice programming model.
* Evaluate the common characteristics, separate strategies and resulting capabilities of both models.
* Compare/Evaluate the performance of both models on a benchmark based on the scenario implementations  

~ green
* the assumptions/theses/laws/etc on MSA presented in chapter "MSA" were identified through thorough literature research
* literature review for chapter: concurrency, Actor model, microservice paradigm, similarities and differences
* practical work for Actor solution, microservice solution
~

## Contributions

...

* A conceptual evaluation of actor- and microservice programming models with a focus on concurrent computation.
* A benchmark and performance comparison of an application scenario with a mixture of synchronous and asynchronous communication.... based on implementations using the actor and microservice programming models

## Structure of the Thesis

The following thesis is ordered as follows: Chapter [#ch-concurrency] discusses *concurrency* in general with a focus on the concerns relevant for our discussion. In Chapter [#ch-actor-model] the *actor model of computation* is introduced and subsequently the *microservice architecture style* in Chapter [#ch-microservice-paradigm]. Chapter [#ch-scenario] concerns programming with actors and microservices, where Section [#ch-scenario] describes a scenario system we implement, Section [#ch-actor-impl] the implementation strategies with actors, and Section [#ch-microservice-impl] the implememtation strategies with microservices.

Chapter [#ch-evaluation] uses the theoretical knowledge and practical findings to compare Actors and Microservices by evaluating capabilities due to commonalities and differences. Finally, Chapter [#ch-conclusion] will state a case for both concepts and formulate our conclusive view.