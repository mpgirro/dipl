
Introduction
============



~ Epigraph { caption: "Lewis Carroll, Alice in Wonderland"}
"Begin at the beginning," the King said gravely, "and go on till you come to the end: then stop."
~

<!--
~ Epigraph { caption: "Terry Winograd"}
The main activity of programming is not the origination of new independent programs, but in the integration, modification, and explanation of existing ones.
~

~ Epigraph { caption: "Ellen Ullman"}
We build our computer (systems) the way we build our cities: over time, without a plan, on top of ruins.
~

~ Epigraph { caption: "Butler Lampson"}
I think the computer is the world's greatest toy. You can invent wonderful things and actually make them happen.
~

~ Epigraph { caption: "Pamela Zave"}
The purpose of software engineering is to control complexity, not to create it.
~

~ Epigraph { caption: "Unknown"}
Distributed is truely concurrent
~
-->

The world is concurrent. [etwas sehr allgemeiner blabla und 1, 2 beispiele aus der echten welt]{.important}.

... As such, the idea of simultaneous actions has not been absent from the domain of computer programming. In this thesis, we will therefore take a close look at two concepts both introducing notions of concurrency into programs and/or systems, respectivly the *Actor Model* of Computation and the *Microservice* Architectural Style.


## Problem Statement

Draoni *et al.* [@Dra17a] point out that there is yet a gap in the literature emphasising the connections the domains of Actor model and Microservices. 

... This work is aiming to fill this gap, with a special focus on the specific arc of concurrent programming through these concepts.

...

Therefore, we want to address the following research question:

> __RQ__: *How is the Actor Model comparing against the Microservice Paradigm regarding their properties and capabilities for prorgamming concurrent systems?*

## Aim and Scope of the Work

~ todo
Hier soll kurz Erklärt werden worum es mir bei der Erarbeitung der Antwort auf die Forschungsfrage geht. Vor allem soll auch abgegrenzt werden wieso es praktische Implementierungen gibt und welchen Zweck diese erfüllen, d.h. dass diese nicht auf ihre Leistung bzgl. der Domäne evaluiert werden.
~

...

The goal of this work is to provide an

~LitNote
- Clear separation between search engine and domain specific tasks (writing to index and search, fetching and parsing feeds, etc) and the communication and coordiantion specific parts (actors architecture and microservice architecture). Therefore a core library was developed for the first, and for the second "only" backends utilizing this lib was needed. It allows easy analysis/argumentation about the concurrent programming vs MSA aspect of the thesis, because all test scenario specific parts are part of core-lib, and could therefore be replaced by other domain specific code or non-search engine code

Important that core-lib does not introduce any own concurrent aspect, all concurrency should be done via actors/microservices

* core-lib is for demonstration
* actor-backend and microservice-backend are for scientific work
* will not focus on any specific search engine improvement
~

...

For we are conducting a *conceptual* analysis, we will refrain from giving formal definitions of all concepts (which would tend to become rather excessive), and confine on describing the concept semantics in an informal way sufficient for comparative evaluation.

## Methodological Approach

~ todo
Hier einen kurzen Überblick über die Arbeitsweise, ähnlich der Darlegung die bereits im Expose gegeben wurde.
~

~ green
* the assumptions/theses/laws/etc on MSA presented in chapter "MSA" were identified through thorough literature research
* literature review for chapter: concurrency, Actor model, microservice paradigm, similarities and differences
* practical work for Actor solution, microservice solution
~

## Structure of the Thesis

The following thesis is ordered as follows: chapter [#ch-concurrency] discusses *Concurrency* in general with a focus on the concerns relevant for our discussion. In chapter [#ch-actor-model] the *Actor Model of Computation* is introduced and subsequently the *Microservice Architecture Style* in chapter [#ch-microservice-paradigm]. An exemplary scenario for a concurrent system is outlined in chapter [#ch-scenario]. Building upon this, chapter [#ch-actor-impl] is concerned with the conceptualities of implementing it using an Actor approach, while chapter [#ch-microservice-impl] does the same for a Microservice Architecture. Chapter [#ch-evaluation] uses the theoretical knowledge and practical findings to compare Actors and Microservices by evaluating capabilities due to commonalities and differences. Finally, chapter [#ch-conclusion] will state a case for both concepts and formulate our conclusive view.