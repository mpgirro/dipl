
# Introduction


~ Epigraph { caption: "Peter Landin"}
Most papers in computer science describe how their author learned what someone else already knew.
~

<!--
~ Epigraph { caption: "Terry Winograd"}
The main activity of programming is not the origination of new independent programs, but in the integration, modification, and explanation of existing ones.
~

~ Epigraph { caption: "Ellen Ullman"}
We build our computer (systems) the way we build our cities: over time, without a plan, on top of ruins.
~

~ Epigraph { caption: "Butler Lampson"}
I think the computer is the world's greatest toy. You can invent wonderful things and actually make them happen.
~

~ Epigraph { caption: "Pamela Zave"}
The purpose of software engineering is to control complexity, not to create it.
~

~ Epigraph { caption: "Unknown"}
Distributed is truely concurrent
~
-->


The physical world consist of infinit simultaneous activities in every moment of time. Programmers experience nature as a concurrent environment. As such, the idea of simultaneous actions has not been absent from the immaterial world of computer programming. Numerous models to conceive concurrent execution have been proposed over the decades. Now that manycore machines are widespread and distribution is popular in the current trend of *cloud computing*, concurrent programming has become essential. Many of the proposed models are therefore now heavily applied in practice.

In this thesis, we merit attention to two approaches to concurrent programming. The first approach is the so-called *actor model of computation* [@Hew73], a decade-old model dedicated to expressing concurrency. The second approach is based on the *microservice paradigm* [@Fow14], originally an architectural style for software systems that adds concurrent execution implicitely. 


## Problem Statement


Draoni *et al.*\ [@Dra17a] point out that there is yet a gap in the literature emphasizing the connections of the actor model and microservices. This work is aiming to fill this gap, with a regard focusing on the concurrent programming aspects of these concepts. Specifically, we ask the following research questions:

> __RQ__: What are the key characteristics of actors and microserices?

> __RQ__: Why do actors and microservices qualify for programming concurrency? How do both models conceive concurrent execution?

> __RQ__: What are the expressive capabilities of both models regarding concurrent programming concerns (e.g.\ parallelization/distribution, location transparency, isolation/independence, scalability)?

> __RQ__: How do actors and microservices compare against regarding efficiency [unmissverst채ndlicher formulieren]{.red}

> __RQ__: How does the performance between actors and microservices compare in a multi-core environment relative to a concurrent system scenario?

* What are the interrelations between actor features/primitives and microservice features/primitives

~ red
* 1 MS mit X worker-threads ?= X actors on thread-pool with X threads

* 2 MS mit X/2 worker-threads ?= X actors on thread-pool with X threads
~


<!--
## Aim and Scope of the Work

~ todo
Hier soll kurz Erkl채rt werden worum es mir bei der Erarbeitung der Antwort auf die Forschungsfrage geht. Vor allem soll auch abgegrenzt werden wieso es praktische Implementierungen gibt und welchen Zweck diese erf체llen, d.h. dass diese nicht auf ihre Leistung bzgl. der Dom채ne evaluiert werden.
~

~ begin green

...

The goal of this work is to provide an

~LitNote
- Clear separation between search engine and domain specific tasks (writing to index and search, fetching and parsing feeds, etc) and the communication and coordination specific parts (actors architecture and microservice architecture). Therefore a core library was developed for the first, and for the second "only" backends utilizing this lib was needed. It allows easy analysis/argumentation about the concurrent programming vs MSA aspect of the thesis, because all test scenario specific parts are part of core-lib, and could therefore be replaced by other domain specific code or non-search engine code

Important that core-lib does not introduce any own concurrent aspect, all concurrency should be done via actors/microservices

* core-lib is for demonstration
* actor-backend and microservice-backend are for scientific work
* will not focus on any specific search engine improvement
~

~ end green

...

We are conducting a *conceptual* analysis and will therefore refrain from giving formal definitions of all concepts, which would tend to become rather excessive. Instead, we confine on describing the concept semantics in an informal way sufficient for comparative evaluation.
-->


## Methodological Approach


We conducted our research using the following methodological steps:

* Identify the key characteristics of actors and microservices through literature review. 
* Define a scenario for a concurrent system. 
* Develop an implementation of the scenario based on actors and another implementation based on microservices.
* Using the knowledge gained from implementing the systems, evaluate the expressive capabilities of both models that result from the key characteristics and applied solution strategies.
* Perform a system efficiency benchmark of both implementations.
* Evaluate the benchmark reasults and draw conclusions about the efficiency of the concurrent execution resulting from programming with actors and microservices.


## Contributions


We give answers to the research questions be providing the following contributions:

* We give a survey of the model characteristics of actors and microservices. [Kann ich das so sagen? Ist "survey" nicht eine ganze eigene Studie mit allem PiPaPo?]{.red}

* We design a scenario for a prototypical concurrent system.

* We fill the current gap in the literature and describe the interrelations of actors and microservices. We evaluation key capabilities regarding concurrent programming  (parallelization/distribution, communication, persistence/IO, location transparency, isolation/independence, and scalability) that can be expressed by actors and microserices. Our findings are relative to our concurrent system scenario.

* We provide an actor and a microservice implementation of the concurrent system scenario. We also provide a benchmark and performance comparison for both system implementations and reflect on the efficiency leveraged through each model. 


## Structure of the Thesis

The following thesis is ordered as follows: Chapter [#ch-concurrency] discusses *concurrency* in general with a focus on the concerns relevant for our susequent discussion. In Chapter [#ch-actor-model] the *actor model of computation* is introduced and subsequently the *microservice architecture style* in Chapter [#ch-microservice-paradigm]. Chapter [#ch-implementation] concerns programming with actors and microservices, where Section [#sec-scenario] describes a scenario system we implement, Section [#ch-actor-impl] the implementation strategies with actors, and Section [#ch-microservice-impl] the implememtation strategies with microservices.

Chapter [#ch-evaluation] uses the theoretical knowledge and practical findings to compare Actors and Microservices by evaluating capabilities due to commonalities and differences. Finally, Chapter [#ch-conclusion] will state a case for both concepts and formulate our conclusive view.