
# Introduction


~ Epigraph { caption: "Butler Lampson"}
I think the computer is the world's greatest toy. You can invent
wonderful things and actually make them happen.
~


The physical world is a composition of simultaneous activities.
Programmers experience nature as a concurrent environment. As such, the
idea of simultaneous actions has not been absent from the intangible
world of computer programming. Numerous models to conceive concurrent
execution have been proposed over the decades. Now that manycore machines
are widespread and distribution is popular in the current trend of *cloud
computing*, concurrent programming techniques have become essential. Many
of the proposed models are therefore now heavily applied in practice.

In this thesis, we pay attention to two approaches toward concurrent
programming. The first approach is the *actor model* [@Hew73], a
decade-old model dedicated to express concurrency. The second approach is
based on the *microservice paradigm* [@Fow14], originally an
architectural style for software systems that adds concurrent execution
implicitly.


## Problem Statement


Dragoni *et al.*\ [@Dra17a] point out that there is yet a gap in the
literature that emphasizes the connections of the actor model and the
microservice model. This work aims to fill this gap, with a focus on the
concurrent programming aspects of these two concepts. Specifically, we
ask the following research questions:

<!--
- __RQ1__: *Why do actors and microservices qualify for programming concurrency?*
* __RQ2__: *How do the actor and microservice model facilitate concurrent execution?*
* __RQ3__: *What are the expressive capabilities of actors and microservices regarding concurrent programming concerns?*
* __RQ4__: *How does the performance of actors and microservices compare in a multi-core environment relative to a concurrent system scenario?*
{ list-style-type:none }
-->

|:~~{width:8ex}~~~|:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
| __RQ1__         | Why do actors and microservices qualify for programming concurrency? |
{ }

|:~~{width:8ex}~~~|:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
| __RQ2__         | How do the actor and the microservice model facilitate concurrent execution? |
{ }

|:~~{width:8ex}~~~|:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
| __RQ3__         | What are the expressive capabilities of actors and microservices regarding |
|                 | concurrent programming concerns?                                           |
{ }

|:~~{width:8ex}~~~|:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
| __RQ4__         | How does the performance of actors and microservices compare in a multi- |
|                 | core environment relative to a concurrent system scenario?               |
{ }

<!--
> __RQ1__: Why do actors and microservices qualify for programming concurrency?

> __RQ2__: How do the actor and microservice model facilitate concurrent execution?

> __RQ3__: What are the expressive capabilities of actors and microservices regarding concurrent programming concerns?

> __RQ4__: How does the performance of actors and microservices compare in a multi-core environment relative to a concurrent system scenario?
-->


## Methodological Approach


We conduct our research using the following methodological steps:

1. Identify the key characteristics and resulting model semantics of
   actors and microservices through literature review.
2. Define a non-trivial scenario for a concurrent system. 
3. Develop two implementations of this scenario. One implementation is
   based on actors and the other implementation is based on
   microservices.
4. Using the knowledge gained from implementing the systems, evaluate the
   expressive capabilities of both models.
5. Perform an efficiency benchmark of both system implementations.
6. Evaluate the benchmark results, and answer the research questions.


## Structure of the Thesis


This thesis has the following structure: Chapter [#ch-concurrency]
discusses *concurrency* in general with a focus on the concerns relevant
for our subsequent discussion. Chapter [#ch-actor-model] introduces the
*actor model of computation* and subsequently
Chapter [#ch-microservice-paradigm] the *microservice architecture
style*. Chapter [#ch-implementation] concerns programming with actors and
microservices, where Section [#sec-scenario] describes a scenario system
we implement, Section [#ch-actor-impl] the implementation strategies with
actors, and Section [#ch-microservice-impl] the implementation strategies
with microservices. Chapter [#ch-evaluation] evaluates both programming
models based on the implementations, where
Section [#sec-eval-expressiveness] concerns the expressiveness of the
models, and Section [#sec-eval-efficiency] their efficiency.
Chapter [#ch-conclusion] gives our conclusive view.