Title             : Concurrent Programming with Actors and Microservices
Subtitle          :
Author            : Maximilian Irro
<!--Email             : max@irro.at-->
Copyright         : Maximilian Irro, 2018
Title Footer      : 2018
Subtitle EN       : &subtitle;
Subtitle DE       : &subtitle;
Author Gender     : male
Author Pretitle   :
Author Posttitle  : BSc BSc
Author Address    : Pfalzstra{\ss}e 10, 5282 Ranshofen
Regnumber         : 1026859
Curriculum EN     : Software Engineering \& Internet Computing
Curriculum DE     : Software Engineering \& Internet Computing
Advisor           : Franz Puntigam
Advisor Gender    : male
Advisor Pretitle  : Ao.Univ.Prof. Dipl.-Ing. Dr.
Advisor Posttitle : 
Subject           : Concurrent Programming
Keywords          : concurrency, actor model, microservices
Thesis Type       : master <!-- bachelor / master / doctor / phd-school -->
Bachelor Thesis   : false
Master Thesis     : true
Doctor Thesis     : false
Master Degree     : dipl. <!-- dipl. / rer.nat. / rer.soc.oec. / master -->
Doctor Degree     : <!-- rer.nat. / techn. / rer.soc.oec. -->
Script            : style/mathjax-font.js
Toc depth         : 3
Cite All          : False
Bibliography      : dipl
<!--Bib Style         : plainnat-->
<!--Bib style         : style/keynat.bst-->
Csl Style         : style/custom.csl
<!--Csl Style         : style/elsevier-with-titles.csl-->
<!--Csl Style         : style/iso690-cs.csl-->

<!--Csl Style         : style/chinese-journal-of-aeronautics.csl -->
<!--Csl Style         : style/elsevier-with-titles.csl-->
<!--Csl Style         : style/association-for-computing-machinery.csl-->
Name References   : Bibliography
Name Figures      : List of Figures
Name Tables       : List of Tables


[INCLUDE=style/vutinfth]


<!-- Experimental MiniTOC support 
Package        : minitoc
Tex Doc Header :
    \dominitoc % MiniTOC initialization
    \faketableofcontents
H1 { tex-cmd-outer-after: "\minitoc" }
-->

<!-- define some unicode characters -->
top: &#8868;
rightleftharpoons: &#8652;
rightleftarrows: &#8644;
Tex Header :
  \mdDefineUnicode{8868}{\ensuremath{\top}}
  \mdDefineUnicode{8652}{\ensuremath{\rightleftharpoons}}
  \mdDefineUnicode{8644}{\ensuremath{\rightleftarrows}}

<!--  Blockquotes for chapter headers -->
Package      : epigraph
Tex Header   : 
  \epigraphsize{\small\itshape}
  \setlength\epigraphwidth{6cm}
  \setlength\epigraphrule{0pt}
Epigraph {
  replace:"~ Begin TexOnly&nl;\
           ~ Begin TexRaw&nl;\
             \epigraph{\textit{&source;}}{--- &caption;}%mdk&nl;\
           ~ End TexRaw&nl;\
           ~ End TexOnly&nl;\
           ~ Begin HtmlOnly&nl;\
            <blockquote class='epigraph'>&nl;\
              <p class='epigraph-body'>&source;</p>&nl;\
              <footer class='epigraph-footer'>— &caption;</footer>&nl;\
            </blockquote>&nl;\
           ~ End HtmlOnly"
}
.epigraph { 
  max-width:50%; 
  margin-left: auto; 
  margin-right: 0; 
  margin-top: 30px;
  margin-bottom: 70px;
}


<!--
Bibl { 
  before: "# &name-references; { -; .heading-references; font-family: tex-cmd-sffamily }&nl;";
}
-->

.acronym       { font-family: sans-serif; font-weight: bold; width:15ex; }
.acronym-table { list-style-type:none; margin-left:0; paddding-left:0; tex-env: "itemize[leftmargin=*]"}

<!-- change some fonts used in latex, my personal preference -->
@if tex {
  dt       { font-family: sans-serif }
  .tocitem { color:black }
}

<!-- applying sffamily to the references is a bit more complicated -->
Bibliography { tex-cmd-outer-before: "\mdsetrefname{\textsf{&name-references;}}%mdk&nl;" }

<!--Bibl { font-size: small }-->
dt           { margin-top:1ex }
dd           { margin-bottom:1ex }
blockquote   { font-style: italic; }
.tocblock2   { margin-bottom:1em }
.figureline  { display: none }

toc.toc-figures   { -; before: "# &name-figures;  { -; .heading-figures }&nl;" }
toc.toc-tables    { -; before: "# &name-tables;   { -; .heading-tables }&nl;" }

<!-- arbitrary helper classes, while work in progress -->
.findings       { border: solid black 1px; padding:1rem }
.findings-title { font-family: sans-serif; font-weight: bold; margin-left:1rem; }
.findings-list  { margin-top: 1ex; padding-top: 0ex; margin-right:1rem; }
.example-title  { font-family: sans-serif; font-weight: bold; }
.litnote, .lit, .literature { 
  background-color: LightGray;
  padding: 1ex;
}
.mind   { background-color: #cbffcb; before="["; after="]" }
.quelle { color: red; before="["; after="]" }
.todo, .important, .delete, .red { 
  color:red 
}
.green  { color: green }
.greenb { color: green; font-weight: bold }


@if not (tex) {
  Bib Search Url : scholar.google.at
}

CSS Header      :
  /*
  @import url(https://fonts.googleapis.com/css?family=Crimson+Text);
  @import url(https://fonts.googleapis.com/css?family=Source+Code+Pro);
  @import url(https://fonts.googleapis.com/css?family=Roboto);
  */
  /*
  @import url(http://spratt.github.io/Computer-Modern/cmserif.css);
  @import url(http://spratt.github.io/Computer-Modern/cmsans.css);
  */
  @import url(https://cdn.rawgit.com/dreampulse/computer-modern-web-font/master/fonts.css);
  body.madoko {
    font-family: "Computer Modern Serif", "Crimson Text", serif;
    font-size: 16px;
    max-width: 39em; /* reduce to: 34em */
  }
  .madoko code, .madoko pre {
    font-family: "Computer Modern Typewriter", "Source Code Pro", monospace;
    font-size: 1rem !important;
  }
  .madoko .math-rendering {
    color: black;
  }
  hr.figureline.madoko {
    display: none;
  }
  .toc a, .toc a:visited { 
    color: #0000EE;  
  }
  .a, a:visited {
    color: #0000EE;  
  }
  .titleheader {
    max-width: 80%;
  }
  .epigraph {
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
  }
  .epigraph-body { 
    -webkit-margin-before:0; 
    -webkit-margin-after:0;
  }
  .epigraph-footer { 
    float:right; 
    font-style:normal;
  }
  figure {
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
  }
  .figure > p {
    -webkit-margin-before: 0;
    -webkit-margin-after: 0;
  }
  .findings > p {
    -webkit-margin-before: 0;
    -webkit-margin-after: 0;
  }
  .findings > ul {
    -webkit-margin-after: 0;
  }
  /* TODO do I want the paper style for paragraphs?
  p {
    margin-bottom: 0;
  }
  p + p {
    text-indent: 1.5em;
    margin-top: 0; 
  }
  */
  .findings-title,
  .example-title {
    font-family: "Computer Modern Sans", Roboto !important;
    /*font-size: 0.9rem;*/
  }
  .li {
    text-align: justify;
  }
  .toc>h1 {
    text-align: start;
  }
  .h1, .h2, .h3, .h4, .h5, .h6,
  .title {
    font-family: "Computer Modern Sans" !important;
  }
  dt {
    font-family: "Computer Modern Sans" !important;
  }
  .acronym-item { 
    font-family: "Computer Modern Sans" !important;
  }
  .acronym-table {
    -webkit-padding-start: 0;
  }
  .madoko .footnotes code {
    font-size: small !important;
  }
  

<!-- HTML -->
~ Begin HtmlOnly
[TITLE]

<!-- 
A PDF Version of this thesis is available at [max.irro.at/pub/dipl/thesis.pdf](http://max.irro.at/pub/dipl/thesis.pdf)
-->

[TOC]

[TOC=figures]
[TOC=tables]
~ End HtmlOnly



&pagebreak;
~ Begin TexOnly
~ Begin TexRaw
\vspace*{\fill}
~ End TexRaw
~ End TexOnly
~ Begin Center

*To whom it may concern*

~ End Center
~ Begin TexOnly
~ Begin TexRaw
\vspace*{\fill}
~ End TexRaw
~ End TexOnly
&pagebreak;


<!-- TeX -->
~ Begin TexOnly
~ Begin TexRaw
\begin{danksagung*}
~ End TexRaw
~ End TexOnly

<!-- HTML -->
~ Begin HtmlOnly
# Danksagung { -; toc:clear }
~ End HtmlOnly

~ todo
Ich danke meiner Kaffeemaschine, dem Petzi Bär und der Guiness Brauerei.
~

<!--
Es gilt einigen wenigen meinen Dank auszusprechen:

* Meinen Eltern und meiner Schwester, die mich in meinem Studium immer unterstützt haben, obwohl ich viel zu selten anrufe.
* Meinem Betreuer, Franz Puntigam, für die guten Ratschläge im Zuge dieser Arbeit, die sich alle bewährt, und für all das, was er gelehrt und ich gelernt habe.
* Theresa und Alex, für das Korrekturlesen. Ich weiß, es war nicht leicht.
-->

<!-- TeX -->
~ Begin TexOnly
~ Begin TexRaw
\end{danksagung*}
\begin{abstract}
~ End TexRaw
~ End TexOnly

<!-- HTML -->
~ Begin HtmlOnly
# Abstract { -; toc:clear }
~ End HtmlOnly

Common problems require applications to manage multiple concerns simultaneously. A convenient approach is the concept of *concurrent programming*. In this thesis, we investigate two different models for introducing concurrent computational units into software architectures. One approach is the *actor model* that defines theoretically well-known constructs supporting concurrent, parallel and distributed execution in a transparent way. The other approach is an architectural style based on so-called *microservices*, a recent trend that gained academic and industrial popularity. Microservices facilitate many principles of the old Unix philosophy by composing complex functionality through small, independent, highly cohesive and loosely coupled executables. These programs interoperate via lightweight, technology heterogenous messaging channels. The deployment modality of microservices conceives concurrent execution through the operating system scheduler. This thesis compares the programming of concurrent computation through actors and microservices with respect to a non-trivial concurrent system scenario. We argue that both approaches share many conceptual similarities and [few but significant]{.red} differences. Both models have the same expressive capabilities regarding concurrent programming concerns like communication and scalability, but suffer from different trade-offs. We provide implementations of the system scenario based on actor and microservice architectures. Benchmark results of these implementations suggests that actors provide better system efficiency through a smaller codebase. Microservice architectures consume significantly more system resources and suffer especially from purely synchronous communication mechanisms. 

<!-- TeX -->
~ TexOnly
~~ TexRaw
\end{abstract}
\begin{kurzfassung}
~~
~ 

<!-- HTML -->
~ Begin HtmlOnly
# Kurzfassung { -; toc:clear }
~ End HtmlOnly


Applikationen benötigen häufig eine simultane Bearbeitung mehrere Aufgaben. *Nebenläufige Programmierung* ist hierfür ein verbreitetes Konzept. Diese Arbeit beschäftigt sich mit zwei Modellen zur Definition nebenläufiger Programmeinheiten innerhalb von Softwarearchitekturen. Eines dieser Modelle ist das sog.\ *Actor Model*. Es definiert theoretisch wohlfundierte Konstrukte, welche transparent eine nebenläufige, parallele und verteilte Ausführung ermöglichen. Bei dem andere Modell handelt es sich um einen relativ neuen Architekturstil unter Verwendung sog.\ *Microservices*, welche sich kürzlich im akademischen und industriellen Umfeld gro&szlig;er Beliebtheit erfreuen. Microservices bauen auf viele Prinzipien der alten Unix-Philosophie, indem sie komplexe Funktionalität durch den Zusammenschluss kleiner, unabhängiger, kohäsiver und lose gekoppelter Programme konzipieren. Diese Programme interagieren über leichtgewichtige, auf Nachrichtenaustausch basierende, technologisch heterogene Kommunikationskanäle. Microservices unterliegen einer implizit nebenläufigen Ausführungsmodalität durch den Prozess-Scheduler des Betriebssystems. Diese Arbeit vergleich die Programmierung von nebenläufiger Ausführung mittels Actors und Microservices relativ zu einem nichttrivialen Fallbeispiel eines nebenläufigen Systems. Wir argumentieren, dass beide Ansätze viele Gemeinsamkeiten und wenige aber wichtige konzeptionelle Unterschiede besitzen. Beide Modelle haben gleichwertige Möglichkeiten um typische Anliegen der nebenläufigen Programmierung wie Kommunikation und Skalierbarkeit auszudrücken. Jedoch unterliegen die Modelle unterschiedlichen Trade-offs. Wir stellen Implementierungen des Fallbeispiels bereit, welche jeweils auf Actors bzw.\ Microservices basieren. Die Resultate eines Benchmarkings dieser Implementierungen legen nahe, dass Actors eine bessere Systemeffizienz verbunden mit einer kleineren Codebasis ermöglichen. Microservice-Architekturen hingegen konsumieren erheblich mehr Systemresourcen und leider vor allem unter den Auswirkungen rein synchroner Kommunikationsmechanismen.

~ TexOnly
~~ TexRaw
\end{kurzfassung}
% Select the language of the thesis, e.g., english or naustrian.
\selectlanguage{english}
~~
~ 

<!--
# Preface / Authors Note { -; toc:clear; }

Back in early 2016, I came across a comment thread discussion[^fn-hackernews] on the famouse "HackerNews" board (*news.ycombinator.com*) where someone eventually claimed:

> "You'll never hear an Erlang programmer even talk about microservices because they are a solution to a problem that doesn't exist in Erlang, or any sufficiently concurrent language for that matter". 

First I thought this was asking for a "`[citation needed]`"[^fn-xkcd], but it was followed by a second statement that instead started to intrigued me:

> "The architecture of an idiomatic Erlang-based system is essentially a microservice architecture."

But is it really? I was wondering. It would have some fundamental implications. Erlang is an interresting language (and we will motivate some of the reasons why in due course), and one of its basic building blocks are what it defines as *processes*. They are Erlangs version of the Actor model for concurrent programming. If the claim that any Erlang system is a microservice architecture, than these processes would mirror the microservices. And the name "process" already motivates why this might be the case. Any microservices most essential property is that it is contained within a single, dedicated (operating-system) process, and these are by nature concurrently executed on the OS level. One thing that I thought was odd though (back then at least), was that Erlangs processes are Actors, and Actors are for concurrency (like threads), while a microservice by its nature is really a component of a distributed system. And if concurrency primitives can meet the concerns a distributed system architecture style can, then why bother with all the hassles that usually come with distributed programming anyway?

Having been passionate about microservice architectures as an alternative to ever growing monoliths for some time back then, this idea would remain in the back of my head and pop up occasionally to think about when there was time to think about such things - like on public transport.  

Over a year later, I've read an article[^fn-qcon] about a presentation given by Joe Duffy, former Director of Engineering for languages and compilers at Microsoft, that stated:

> "Duffy expects to see a return of distributed programming with increasingly fine-grained distributed systems that will make systems look more and more like classic concurrent systems."

Now, these fine grained distributed systems Duffy is speaking about are what we have dubbed microservice architectures at the moment, and based on the previous claim, the "classic concurrent systems" they resemble would look like idiomatic Erlang systems, that is Actor-based concurrent systems in general.

From the first claim and the principles of microservice design, we can argue that microservice architectures qualify for such fine grained distributed systems Duffy is speaking about. And this would mean that the "classic concurrent systems" these distributed systems resemble would look like idiomatic Erlang systems, that is Actor-based concurrent systems in general.

And this, I thought, was worth some further investigation. The results of this investigation is this thesis. May it spark in you the idea that you might not want another microservice architecture for your next project so easily.

Vienna, June 2018

Maximilian Irro

[^fn-hackernews]: <https://news.ycombinator.com/item?id=8665690>
[^fn-xkcd]: <https://xkcd.com/285/>
[^fn-qcon]: <https://www.infoq.com/news/2017/03/distributed-programming-qcon>
-->

~ TexOnly
[TOC]

&pagebreak;

~~ TexRaw
\listoffigures
\listoftables

% Switch to arabic numbering and start the enumeration of chapters in the table of content.
\mainmatter
~~
~ 

[INCLUDE=ch1-introduction]
[INCLUDE=ch2-concurrency]
[INCLUDE=ch3-actor-model]
[INCLUDE=ch4-microservice-paradigm]
[INCLUDE=ch5a-impl-scenario]
[INCLUDE=ch5b-impl-akka]
[INCLUDE=ch5c-impl-msa]
[INCLUDE=ch6a-eval-expressivness]
[INCLUDE=ch6b-eval-efficiency]
[INCLUDE=ch7-conclusion]

~TexRaw
\appendix
~

# Example Feed Structure { @h1="A"; #ch-benchmark-feed }


An RSS 2.0 [@Win03] feed is an XML document. The feed's top level element is the `<rss>` tag. A feed becomes an Atom [@RFC4287] if the `<rss>` element additionally has the XML namespace `xmlns:atom="http://www.w3.org/2005/Atom"`. The `<channel>` encloses the metadata entries of the feed (`<title>`, `link`, `<description>`, etc.) as well as a set of `<item>` elements. Each item has it's own set of metadata elements (`<title>`, `pubDate`, `<description>`, `<guid>`, etc.). The most important element of each item of a podcast feed is the `<enclosure>`, which provides the URL to the media file. Some feeds of the domain also apply additional XML namespaces to provide a wider range of metadata. Two prominent examples of such namespaces we also support in Echo's feed parsers are:

* `xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"` for metadata used in the iTunes Podcast Directory [@iTunesDirectory].
* `xmlns:psc="http://podlove.org/simple-chapters/"` for chaptermark metadata information in the Simple Chapters [@PotloveSimpleChapters] format.

Below is a complete example of an RSS 2.0 feed. It provides some few metadata elements. The feed merely has a single `<item>` element. In general, a feeds has several items. All metadata in this example is text of the so-called *Lorem ipsum* [^fn-lorem-ipsum], a well-known placeholder text snippet. The text is not intended to transport any meaning. Instead, the design and publishing industries use the text to demonstrate a text structure or visual form. Hence, the Lorem ipsum is also suitable to illustrate the RSS feed structure, without providing actual meaningful content.

[^fn-lorem-ipsum]: <https://lipsum.com>

&pagebreak;

```{language:xml}
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<rss>
  <channel>
    <title>Lorem ipsum</title>
    <link>https://lorem.ispum.fm</link>
    <language>en-us</language>
    <description>
      Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed 
      diam nonumy eirmod tempor invidunt ut labore et dolore magna
      aliquyam erat, sed diam voluptua
    </description>
    <item>
      <title>Lorem ipsum</title>
      <enclosure url="https://lorem.ispum.fm/episode-1.mp3" 
                 length="17793193" type="audio/mpeg"/>
      <guid isPermaLink="false">https://lorem.ispum.fm/li001</guid>
      <pubDate>Fri, 13 Jul 2018 16:35:13 +0000</pubDate>
      <description>
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed 
        do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
        Ut enim ad minim veniam, quis nostrud exercitation ullamco 
        laboris nisi ut aliquip ex ea commodo consequat. Duis aute 
        irure dolor in reprehenderit in voluptate velit esse cillum 
        dolore eu fugiat nulla pariatur. Excepteur sint occaecat 
        cupidatat non proident, sunt in culpa qui officia deserunt 
        mollit anim id est laborum.
      </description>
    </item>
  </channel>
</rss>
```


# Acronyms and Abbreviations { - }

* [AMQP]{.acronym}  Advanced Message Queue Protocol
* [AO]{.acronym}    Active Object
* [API]{.acronym}   Application Programming Interface
* [DTO]{.acronym}   Data Transfer Object
* [FIFO]{.acronym}  First In First Out
* [fJAR]{.acronym}  fat JAR
* [HTTP]{.acronym}  Hypertext Transfer Protocol 
* [IPC]{.acronym}   Inter-Process Communication
* [IO]{.acronym}    Input/Output
* [IoC]{.acronym}   Inversion of Control
* [IR]{.acronym}    Information Retrieval
* [JAR]{.acronym}   Java Archive
* [JSON]{.acronym}  JavaScript Object Notation
* [JVM]{.acronym}   Java Virtual Machine
* [LB]{.acronym}    Load Balancing
<!--* [MPS]{.acronym} Messages per Second [(in Verwendung?)]{.red}-->
* [MS]{.acronym}    Microservice
* [MSA]{.acronym}   Microservice Architecture
* [OOP]{.acronym}   Object-oriented Programming
* [OS]{.acronym}    Operating System
* [PID]{.acronym}   Process Identifier
* [REST]{.acronym}  Representational State Transfer
* [RPC]{.acronym}   Remote Procedure Call
* [RSS]{.acronym}   Rich Site Summary
* [sJAR]{.acronym}  skinny JAR
* [SOA]{.acronym}   Service-oriented Architecture
<!--* [SoC]{.acronym} Separation of Concerns-->
* [SOC]{.acronym}   Service-oriented Computing
* [SOP]{.acronym}   Service-oriented Programming
* [SRP]{.acronym}   Single Responsibility Principle
<!--* [ST]{.acronym} Startup Time-->
* [STM]{.acronym}   Software Transactional Memory
<!--* [URI]{.acronym} Uniform Resource Identifier-->
* [URL]{.acronym}   Uniform Resource Locator
* [VM]{.acronym}    Virtual Machine
* [XML]{.acronym}   Extensible Markup Language
{ .acronym-table }


[BIB]

