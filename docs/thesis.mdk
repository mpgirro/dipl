<!--[INCLUDE=style/marticle]-->

Title        : Concurrent Programming with Actors and Microservices
Subtitle     :
<!--
Title        : Concurrent Programming
Subtitle     : Actors versus Microservices
-->
<!--
Title        : Actors versus Microservices
Subtitle     : Concurrent Programming with the Actor Model of Computation and the Microservice Architecture Style
-->
<!--
Subtitle     : A conceptual analysis comparing the Actor Model of Computation and the Microservice Architecture Style regarding the construction of concurrent system
-->
<!--
Subtitle     : A conceptual analysis comparing the Actor Model and the Microservice Architecture Style regarding the composition of concurrent computation
-->
<!--
Subtitle     : A conceptual analysis comparing the Actor Model of Computation against the Microservice Architecture Style regarding their capabilities for concurrent system construction
-->
<!--
Title        : Concurrent Programming
               and the Microservice Architecture Style
Subtitle     : Hier könnte Ihre Werbung stehen!
-->
Author       : Maximilian Irro
<!--mail        : max@irro.at-->
Copyright    : Maximilian Irro, 2017
Title Footer : 2018
<!-- TODO delete with new layout -->
chead        : 

Subtitle EN       : &subtitle;
Subtitle DE       : &subtitle;
Author Gender     : male
Author Pretitle   :
Author Posttitle  : BSc BSc
Author Address    : Pfalzstraße 10, 5282 Ranshofen
Regnumber         : 1026859
Curriculum EN     : Software Engineering \& Internet Computing
Curriculum DE     : Software Engineering \& Internet Computing


Advisor           : Franz Puntigam
Advisor Gender    : male
Advisor Pretitle  : Ao.Univ.Prof. Dipl.-Ing. Dr.
Advisor Posttitle : 

Keywords          : TODO

Thesis Type       : master <!-- bachelor / master / doctor / phd-school -->
Bachelor Thesis   : false
Master Thesis     : true
Doctor Thesis     : false
Master Degree     : dipl. <!-- dipl. / rer.nat. / rer.soc.oec. / master -->
Doctor Degree     : <!-- rer.nat. / techn. / rer.soc.oec. -->

[INCLUDE=style/vutinfth]

Toc depth    : 3 
Bibliography : dipl
Bib style    : style/keynat.bst
<!--Bib style : plainurl <!-- TODO shows __all__ URLs + DOIs (ungly) -->
<!--Bib style : plainnat-->
<!--bib style: unsrtnat <!-- TODO remove URLs in bibtex when there is a DOI -->
Cite All     : False

<!-- Tkiz -->
<!--
Package*     : tikz
Tex Header   : \usetikzlibrary{snakes,arrows,shapes}
-->

<!--
Package      : pstricks
Package      : pst-plot
Package      : amsmath
Math Latex Full: pdflatex
-->

<!-- define some unicode characters -->
top: &#8868;
Tex Header:
  \mdDefineUnicode{8868}{\ensuremath{\top}}

<!--  Blockquotes for chapter headers -->
Package      : epigraph
Tex Header   : 
  \epigraphsize{\small\itshape}
  \setlength\epigraphwidth{8cm}
  \setlength\epigraphrule{0pt}
Epigraph {
  replace:"~ Begin TexOnly&nl;\
           ~ Begin TexRaw&nl;\
             \epigraph{&source;}{--- &caption;}&nl;\
           ~ End TexRaw&nl;\
           ~ End TexOnly&nl;\
           ~ Begin HtmlOnly&nl;\
            <blockquote>&nl;\
              <p>&source;</p>&nl;\
              <footer style='float:right;'>— &caption;</footer>&nl;\
            </blockquote>&nl;\
           ~ End HtmlOnly"
}
.epigraph { max-width:60%; margin-left: auto; margin-right: 0; }
.epigraph-footer { float:right; }
<!-- # # # # # # # # # # # # # # # # # # # # # # -->

.LitNote { 
  background-color: LightGray;
  padding: 1ex;
}
.Mind {
  background-color: #cbffcb;
  before="[";
  after="]"
}
.Quelle {
  color: red;
  before="[";
  after="]"
}
.Todo { 
  background-color: Aqua; 
  padding: 1ex;
}
.important {
  color:red
}
.delete {
  color:red
}
.red {
  color:red
}

<!-- TODO brauch ich das hier?
@if html {
  Name Contents   : \/

  Section Depth : 1
  Css           : style/webpaginated.css
  Script*       : style/webpaginated.js
}
-->
@if not html {
  Name Contents   : Inhaltsverzeichnis
}
@if not (tex) {
  Bib Search Url: scholar.google.at
}

CSS Header      :
  @import url(https://fonts.googleapis.com/css?family=Crimson+Text);
  @import url(https://fonts.googleapis.com/css?family=Source+Code+Pro);
  body.madoko {
    font-family: "Crimson Text", serif;
    font-size: 16px;
    max-width: 38em;
  }
  .madoko code, .madoko pre {
    font-family: "Source Code Pro", monospace;
  }
  .madoko .math-rendering {
    color: black;
  }
  hr.figureline.madoko {
    display: none;
  }
  .toc a, .toc a:visited { 
    color: #0000EE;  
  }
  .a, a:visited {
    color: #0000EE;  
  }
  .titleheader {
    max-width: 80%;
  }



<!-- HTML -->
~ Begin HtmlOnly
[TITLE]

[TOC]
[TOC=figures]
[TOC=tables]
~ End HtmlOnly

<!--
~ HtmlOnly
A PDF Version of this thesis is available at [max.irro.at/pub/dipl/thesis.pdf](http://max.irro.at/pub/dipl/thesis.pdf)
~
-->

&pagebreak;
~ Begin TexOnly
~ Begin TexRaw
\vspace*{\fill}
~ End TexRaw
~ End TexOnly
~ Begin Center

*To whom it may concern*

~ End Center
~ Begin TexOnly
~ Begin TexRaw
\vspace*{\fill}
~ End TexRaw
~ End TexOnly
&pagebreak;

<!-- TeX -->
~ Begin TexOnly
~ Begin TexRaw
\begin{danksagung*}
~ End TexRaw
~ End TexOnly

<!-- HTML -->
~ Begin HtmlOnly
# Danksagung { -; toc:clear }
~ End HtmlOnly

[TODO]{.important}

<!--
* Meinen Eltern, die mich in meinem Studium immer unterstützt haben, obwohl ich viel zu selten anrufe.
* Meine Betreuer, Franz Puntigam, für all die guten Ratschläge im Bezug auf diese Arbeit. Sie haben sich alle bewährt.
-->

<!-- TeX -->
~ Begin TexOnly
~ Begin TexRaw
\end{danksagung*}
\begin{kurzfassung}
~ End TexRaw
~ End TexOnly

<!-- HTML -->
~ Begin HtmlOnly
# Zusammenfassung { -; toc:clear }
~ End HtmlOnly

[TODO]{.important}

<!-- TeX -->
~ TexOnly
~~ TexRaw
\end{kurzfassung}
\begin{abstract}
~~
~ 

<!-- HTML -->
~ Begin HtmlOnly
# Abstract { -; toc:clear }
~ End HtmlOnly

Common problems...

---

In recent time, a new architectural style called *microservice architecture* gain popularity in the scientific community and industrial applications. In this time, applications are composed of small independent and isolated components called *microservices* communicating via lightweigt communication mechanism. This inherent distributed components result in an concurrent nature of the overall application. In this thesis, we explore the interrelations of the microservice architecture style with programming concurrent applications. We argue that the microservice components have much similarity to the Actor model, and that many of todays Actor implementations are extensions of the theoretical Actor model by characteristics shared by the principle ideas behind microservices. It remains to ask if microservice architectures have aspects exalted to those of Actor-based software architectures, or else Actor-based concurrent could would/should/could have been the answer to the needs that lead to microservices in the first place. 
We test our findings on the implementations of the architecture of a domain specific search engine.


~ TexOnly
~~ TexRaw
\end{abstract}
% Select the language of the thesis, e.g., english or naustrian.
\selectlanguage{english}
~~
~ 


# Preface / Authors Note { -; toc:clear; }

Back in early 2016, I came across a comment thread discussion[^fn-hackernews] on the famouse "HackerNews" board (*news.ycombinator.com*) where someone eventually claimed: "*You'll never hear an Erlang programmer even talk about microservices because they are a solution to a problem that doesn't exist in Erlang, or any sufficiently concurrent language for that matter*". First I thought this was asking for a "`[citation needed]`"[^fn-xkcd], but it was followed by a second statement that instead started to intrigued me:

> "*The architecture of an idiomatic Erlang-based system is essentially a microservice architecture.*"

But is it really? I was wondering. It would have some fundamental implications. Erlang is an interresting language (and we will motivate some of the reasons why), and one of its basic building blocks are what it defines as *processes*. They are Erlangs version of the Actor model for concurrent programming. If the claim that any Erlang system is a microservice architecture, than these processes would mirror the microservices. And the name "process" already motivates why this might be the case. Any microservices most essential property is that it is contained within a single, dedicated (operating-system) process, and these are by nature concurrently executed on the OS level. One thing that I thought was odd though (back then at least), was that Erlangs processes are Actors, and Actors are for concurrency (like threads), while a microservice by its nature is really a component of a distributed system. And if concurrency primitives can meet the concerns a distributed system architecture style can, then why bother with all the hassles that usually come with distributed programming anyway?

Having been passionate about microservice architectures as an alternative to ever growing monoliths for some time back then, this idea would remain in the back of my head and pop up occasionally to think about when there was time to think about such things - like on public transport.  

Over a year later, I've read an article[^fn-qcon] about a presentation given by Joe Duffy, former Director of Engineering for languages and compilers at Microsoft, that stated:

> "*Duffy expects to see a return of distributed programming with increasingly fine-grained distributed systems that will make systems look more and more like classic concurrent systems.*"

Now, these fine grained distributed systems Duffy is speaking about are what we have dubbed microservice architectures at the moment, and based on the previous claim, the "classic concurrent systems" they resemble would look like idiomatic Erlang systems, that is Actor-based concurrent systems in general.

Now, from the first claim and the principles of microservice design, we can argue that microservice architectures qualify for such fine grained distributed systems Duffy is speaking about. And this would mean that the "classic concurrent systems" these distributed systems resemble would look like idiomatic Erlang systems, that is Actor-based concurrent systems in general.

And this, I thought, was worth some further investigation. The results of this investigation is this thesis. May it spark in you the idea that you might not want another microservice architecture for your next project so easily.

Vienna, June 2018

Maximilian Irro

[^fn-hackernews]: <https://news.ycombinator.com/item?id=8665690>
[^fn-xkcd]: <https://xkcd.com/285/>
[^fn-qcon]: <https://www.infoq.com/news/2017/03/distributed-programming-qcon>

~ TexOnly
[TOC]
[TOC=figures]
[TOC=tables]

~~ TexRaw
% Switch to arabic numbering and start the enumeration of chapters in the table of content.
\mainmatter
~~
~ 

[INCLUDE=ch1-introduction]
[INCLUDE=ch2-concurrency]
[INCLUDE=ch3-actor-model]
[INCLUDE=ch4-microservice-paradigm]
[INCLUDE=ch5-scenario]
[INCLUDE=ch6-actor-impl]
[INCLUDE=ch7-microservice-impl]
[INCLUDE=ch8-discussion]
[INCLUDE=ch9-conclusion]

# Acronyms { - }

These arconyms occur throughout the thesis.

* AMQP Advanced Message Queue Protocol
* AO Active Object
* DO Distributed Object
* FIFO First In First Out
* IPC Inter-Process Communication
* JVM Java Virtual Machine
* MOM Message-Oriented Middleware
* MS Microservice
* MSA Microservice Architecture
* OOP Object-Oriented Programming
* OS Operating System
* PID Process Identifier
* REST Representational State Transfer
* RPC Remote Procedure Call
* SOA Service Oriented Architecture
* SoC Separation of Concerns
* SOC Service Oriented Computing
* SRP Single Responsibility Principle
* STM Software Transactional Memory
* URI Uniform Resource Identifier
* URL Uniform Resource Locator
* WSDL Web Services Description Language

# Glossary { - }

* Akka
  : TODO

* Microservice Architecture (MSA)
  : TODO

* Message oriented middleware (MOM)
  : TODO

[BIB]

<!-- TODO glossar, nomenclature, index -->

