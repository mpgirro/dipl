[INCLUDE=style/marticle]

<!--
Title        : A crack in the monolith
Subtitle     : Do suffciently concurrent programming languages need microservice architectures?
-->
<!--Title        : Concurrent Programming Languages and Microservice Architectures-->
Title        : Concurrent Programming for Microservice Architectures
Author       : Maximilian Irro
Email        : max@irro.at
Copyright    : Maximilian Irro, 2017
Title Footer : 2017
<!-- TODO delete with new layout -->
chead        : 

Toc depth    : 3 
Bibliography : dipl
Bib style    : alpha
Cite All     : False

Package      : mathptmx

<!--  Blockquotes for chapter headers -->
Package      : epigraph
Tex Header   : 
  \epigraphsize{\small\itshape}
  \setlength\epigraphwidth{8cm}
  \setlength\epigraphrule{0pt}
Epigraph {
  replace:"~ Begin TexOnly&nl;\
           ~ Begin TexRaw&nl;\
             \epigraph{&source;}{--- &caption;}&nl;\
           ~ End TexRaw&nl;\
           ~ End TexOnly&nl;\
           ~ Begin HtmlOnly&nl;\
            <blockquote>&nl;\
              <p>&source;</p>&nl;\
              <footer style='float:right;'>— &caption;</footer>&nl;\
            </blockquote>&nl;\
           ~ End HtmlOnly"
}
.epigraph { max-width:50%; margin-left: auto; margin-right: 0; }
.epigraph-footer { float:right; }
<!-- # # # # # # # # # # # # # # # # # # # # # # -->

.LitNote { 
  background-color: LightGray;
  padding: 1ex;
}
.Todo { 
  background-color: Aqua; 
  padding: 1ex;
}

@if html {
  Name Contents   : \/

  Section Depth : 1
  Css           : webpaginated.css
  Script*       : webpaginated.js
}
@if not html {
  Name Contents   : Inhaltsverzeichnis
}
@if not (tex) {
  Bib Search Url: scholar.google.at
}

CSS Header      :
  .madoko .math-rendering {
    color: black;
  }
  hr.figureline.madoko {
    display: none;
  }
  .toc a, .toc a:visited { 
    color: #0000EE;  
  }



~ Begin HtmlOnly
[TITLE]
~ Begin SidePanel
[TOC]
~ End SidePanel
~ End HtmlOnly
<!-- We open an HTML class here, which we'll need to close at the end -->
~ Begin MainPanel

<!-- TODO hier müssen sachen wie titleseite, frontmatter etc eingefügt werden -->


# Danksagung { -; toc:clear; }

TODO

<!--
* Meinen Eltern, die mich in meinem Studium immer unterstützt haben, obwohl ich sie viel zu selten anrufe.
-->

# Abstract { -; toc:clear; }

# Kurzfassung { -; toc:clear; }

~ TexOnly
[TOC]
[TOC=figures]
[TOC=tables]
~

# Introduction

~ Epigraph { caption: "Lewis Carroll, Alice in Wonderland"}
Begin at the beginning," the King said gravely, and go on till you come to the end: then stop.
~

## Motivation

## Scope of this Thesis

## Methodology used

## Road Map

# Microservice Architectures

~ Epigraph { caption: "Higgs Boson (2012 -- present)" }
Don't give up on your dreams, keep on sleeping.
~

~ LitNote
* <https://martinfowler.com/articles/microservices.html>

* keywords for microservices challenges from [@AAE16]:
  * Communication/Integration (API, REST, sockets, TCP, gateway, circuit breakers, load balancer, proxy)
  * Service discovery (API gateways, etc)
  * Performance ( QoS, performance, SLA, speed, simulation)
  * Fault-tolerance
  * Security
  * Tracing and Logging
  * Application Performance Monitoring
  * Deployment operations
* eventueller Vergleich mit Komponentenbasiertem Softwareentwurf? "Bei einem komponentenorientierten Softwareentwurf sind Softwaresysteme in möglichst unabhängig wartbare und wiederverwendbare Softwarekomponenten zu zerlegen. Diese Ziele lassen sich verfolgen, indem bei der Definition von Softwarekomponenten dem Entwurfsprinzip der maximalen Kohäsion bei gleichzeitig minimalen Abhängigkeiten gefolgt wird [Szyperski et al. 2002, S. 40; Parnas 1972]" -> http://www.enzyklopaedie-der-wirtschaftsinformatik.de/lexikon/is-management/Systementwicklung/Hauptaktivitaten-der-Systementwicklung/Softwareentwurf/Komponentenorientierter-Softwareentwurf/index.html
~

# Software Architectures

## From the early days to Object-oriented design patterns [title from DGL17]

* [@DGL17] This spike of interest contributed to an increase in the number of existing software architecture patterns (or generally called styles), so that some form of classification was then required. This problem was tackled in one of the most notable works in the field, the book “Software Architecture: Perspectives on an Emerging Discipline” by Garlan and Shaw
* [@DGL17] The classic by Gamma et al. [36] covers the design of object-oriented software and how to translate it into code presenting a collection of recurring solutions, called patterns.

## Componentization via Services (geklaut von M.Fowler)

~ TODO
Kapitel vll eher "Evolution of the Components" nennen? Das Service deren Weiterentwicklung sind?
~

~ TODO
Case Study: Concurrency in ABCL/1 [@Yon86a]

* "Each object in our computation model has its own (auto- nomous) processing power and it my have its local persistent memory,thecontentsofwhichmpcesentitsstate. Anobjectis always in one of three modes: dormant, active, or waiting. An object is initially dormant. It becomes active when it receives a message that satisfies one of the specified patterm and con- straints."

* "When an active object completes the sequence of actions that are performed in response to an accepted message, if no subsequent messages have arrived, it becomes dormant again. An object in the active mode sometimes needs to stop its current activity in order to wait for a message with specified patm'ns to arrive. In such a case, an active object changes into the waiting mode. An object in the waiting mode becomes active again when it receives a n~quired message."

=> vgl mit REST API und wenn ein Service einen anderen Service synchron anspricht
~

## Smart endpoints and dumb pipes (geklaut von M.Fowler)

## Failure is inevitable

## API gateways, circuit breakers and discovery

Case study: Hysterix library

Case study: Akka provides a circuit breaker implementation [@MW16]

## Concurrency considerations

~ LitNote
* Microservices sind ja per Design Concurrent, da eigene Programme (Service = Component). Und wenn man MS skaliert (mehrere Instanten gleichzeitig startet) dann ist diese Component auch parallel. Also falls man auf mehreren Maschinen deployed
* "One reasonable argument we've heard is that you shouldn't start with a microservices architecture. Instead begin with a monolith, keep it modular, and split it into microservices once the monolith becomes a problem. (Although this advice isn't ideal, since a good in-process interface is usually not a good service interface.)" [@FL17]
~

## Development, Debugging and Maintenance

~ Epigraph { caption: "Filipe Fortes" }
Debugging is like being the detective in a crime movie where you're also the murderer.
~

* [DGL17]: microservices implement a limited amount of functionalities, which makes their code base small and inherently limits the scope of a bug.Moreover, since microservices are independent, a developer can directly test and investigate their functionalities in isolation with respect to the rest of the system

## Summary

# Concurrency, Distributed Programming and Scalability

## Summary

# Concurrency Concepts

## Actor-based Concurrency

## Dataflow Programming

## Communicating sequential processes

<https://en.wikipedia.org/wiki/Communicating_sequential_processes>

## Summary

# Object Oriented Design Principles vs. Microservice Architectures

* bzgl OOP: siehe <https://sanaulla.info/2008/06/26/cohesion-and-coupling-two-oo-design-principles/>

## Summary

# The Microservice Architecture Style


## Implicit Concurrency through (Framekworks|Inversion of Control)

~ TODO
Über Concurrency die einem zB Spring Framework gibt
~

## MSA and the Unix Philosophy

> Text streams are to Unix tools as messages are to objects in an object-oriented setting

quelle: "Rule of Composition: Design programs to be connected with other programs." <http://catb.org/esr/writings/taoup/html/ch01s06.html#id2877684> (müsste bereits eine ordentliche Literaturreferenz existieren): [Raymond, Eric S. (2003), "1.6.3 Rule of Composition: Design programs to be connected with other programs", The Art of Unix Programming, Addison-Wesley, pp. 15–16, ISBN 978-0-13-142901-7.]

## Summary

# TODO

## Concurrent by Design Objects

> OrcO: Concurrency First Approach on Objects

## Foundational Issues of concurrent systems

* [@AH85] zu foundational issues in the design of programming languages for concurrent systems
  * shared resources: may chance their internal state while shared 
  * dynamic reconfiguration: dealw ith creation of new objects in the evolution of the system; must be a mechanism to for communicating the existance of such new objects or processes to already existing ones
    * in MSA ist genau das die kernaufgabe der gateway
  * inherent parallelism: programming model should exhibit inherent parallelism in the sense that the amount of available concurrency should be determined as mich as possible from the structure of the programs written
    * also MSA nutzt parallelism inherent, da jeder MS ein prozess, und daher die nebenläufigkeit des OS herangezogen wird (ggf mit multicore-paralllelität); bei aufteilung auf mehr maschinen, sowieso parallel

## Comparisons (welche Elemente lassen sich vergleichen)

### MSA

* [@MW16]
  * components of an application are autonnomous services that execute independently
  * communicate via message passing
  * message passing introduces the possiilities of communnication failures and timeouts among components
    * vgl.: im Actor Model ist die Zustellung von Nachrichten garantiert
  * inspired by SOA
  * key difference between SOA and MS lies in granularity (in SOA, all services are parts of a monolith)
  * components can e deployed separately
  * new versions can be gradually introduced into a system  
    * vgl. Subtyping Idee
  * Components can be more specialized, since they can be written in different techologies
  * services may become overloaded (too many concurrent client requests) or resources kept busy
  * this may easily trigger disastrous cascading failures
  * failure in an MSA is inevitale and should embraced with precaution rather than ignored
  * Failing service may have other services depending on it (what if it becomes unresponsive?)
    * -> circuit breaker pattern; fail fast
    * mit Circuit Breaker State Diagram p.2 !
  * Circuit Breaker: 
    * Hysterix Library
    * Server-side Circuit Breaker
    * Client-side Circuit Breaker
    * Proxy Circuit Breaker
      * introduces Network bottle neck
  * Service Discovery
    * Location of MS may not be statically known at design time
    * using Service registry
      * adopted from SOA
      * = a service that can be used y other components to retrieve ending information about other components
      * in SOA, service discovery part of enterprise service bus
      * in MSA, service discovery as non-standard custom implementations
    * Gateways:
      * single entry point for many APIs
      * since it is an entry point, it is natural to equip it with e.g. service discovery load-balancing, monitoring, security, etc
  * "being essentially distributed, microservices is founded on the well-known mechanism of message passing"
  * all internal services are subjects to potential communciation failures and overloads
  * choreography does not require central control. a critical feature for the scalability of MSA
* [@AAE16]
  * Mache ich auch eine "Mapping Study"?
  * The microservices architecture has become a dominant architectural style choice in the service oriented software industry. Microservices is a style of architecture which puts the emphasis on dividing the system into small and lightweight services that are purposely built to perform a very cohesive business function, and is an evolution of the traditional service oriented architecture style
  * a distributed application where all its modules are microservices
  * commonly agreed benefits:
    * increase in agility
    * developer productivity
    * resilience
    * scalability* reliability
    * maintainability
    * separation of concerns
    * ease of development
  * Even though microservices have emerged from the software industry and have been the focus of practitioners in the last decade[28][22], academic researchers have not kept with the pace
  * Relevante keywords (werden auch für mich irgendwie relevant sein)
    * Communication/Integration
    * Service discovery
    * Performance
    * Fault-tolerance
    * Security
    * Tracing and Logging
    * Application Performance Monitoring* Deploying operations
  * Quality Attributes:
    * Scalability: expandable, evolutionary
    * Interestingly, it has been noticed that there was no distinction between component diagrams and container diagrams in the literature
    * Maintainability: reducing complexity, isolation, loose coupling , decouple, distributed, containerization, autonomy
    * Deployment: expandable, adaptability, changeability, flexible implementation, dynamically changing
    * Health management: resilience, reliability, disaster recovery, no single point of failure
    * Modularity: single responsibility, reduce complexity, separate business concern, specialization, customizable
    * Manageability: self-managed, decentralized management, audibility
    * Performance: response times, transaction duration, throughput, efficiency
    * Reusability: pluggable
    * Technology heterogeneity: portability, freedom to choose a lot of technologies or programming languages
    * Independence: reducing complexity, isolation, loose coupling , decouple, distributed, containerization, autonomy
    * Technology heterogeneity: portability, freedom to choose a lot of technologies or programming languages
    * Agility: iterative, incremental, continuous delivery
    * Security
    * Load balancing: workload intensity distribution
    * Organizational alignment: cross-functional team, reduce the conflict between developers and testers
    * Open interface: microservices should provide an open description of their APIs, GUIs and communication messages format
* [@DGL17]
  * mainstream languages for development of server-side applications, like Java, C/C++, and Python, provide abstractions to break down the complexity of programs into modules. However, these languages are designed for the creation of single executable artefacts, also called monoliths
  * modules of a monolith depend on said shared resources, they are not independently executable
  * Definition 1 (Monolith): A monolith is a software application whose modules cannot be executed independently.
    * Issues:
      * I1: large-size monoliths are difficult to maintain and evolve due to their complexity. Tracking down bugs requires long perusals through their code base
      * I2: monoliths also suffer from the "dependency hell" [55], in which adding or updating libraries results in inconsistent systems that do not compile/run or, worse, misbehave
      * I3: any change in one module of a monolith requires rebooting the whole application. For large- sized projects, restarting usually entails considerable downtimes, hindering development, test- ing, and the maintenance of the project
      * I4: deployment of monolithic applications is usually sub-optimal due to conflicting requirements on the constituent models’ resources: some can be memory-intensive, others computational- intensive, and others require ad-hoc components (e.g., SQL-basedrather than graph-based databases).When choosing a deployment environment, the developer must compromise with a one-size-fits-all configuration, which is either expensive or sub-optimal with respect to the individual modules
      * I5: monoliths limit scalability. The usual strategy for handling increments of inbound requests is to create new instances of the same application and to split the load among said instances. However, it could be the case that the increased traffic stresses only a subset of the modules, making the allocation of the new resources for the other components inconvenient
      * I6: monoliths also represent a technology lock-in for developers, whichare boundto use the same language and frameworks of the original application
  * Definition 2 (Microservice): Amicroservice is a cohesive, independent process interacting via messages
  * From a technical point of view,microservices should be independent components conceptually deployed in isolation and equipped with dedicated memory persistence tools (e.g., databases)
  * Definition 3 (Microservice Architecture): Amicroservice architecture is a distributed application where all its modules are microservices
  * The microservice architectural style does not favour or forbid any particular programming paradigm. It provides a guideline to partition the components of a distributed application into independent entities, each addressing one of its concerns. This means that a microservice, provided it offers its functionalities via message passing, can be internally implemented with any of the mainstream languages cited in the beginning of this section.
  * The principle of microservice architectures assists project managers and developers: it provides a guideline for the design and implementation of distributed applications. Following this principle, developers focus on the implementation and testing of a few, cohesive functionali-ties. This holds also for higher-level microservices, which are concerned with coordinating the functionalities of other microservices.
  * Solutions (S1 is a solution to I1):
    * S1: microservices implement a limited amount of functionalities, which makes their code base small and inherently limits the scope of a bug.Moreover, since microservices are independent, a developer can directly test and investigate their functionalities in isolation with respect to the rest of the system
    * S2: it is possible to plan gradual transitions to new versions of a microservice. The new version can be deployed “next” to the old one and the services that depend on the latter can be gradually modified to interact with the former. This fosters continuous integration [32] and greatly eases software maintenance
    * S3: as a consequence of the previous item, changing a module of a microservice architecture does not require a complete reboot of the whole system. The reboot regards only the microservices of that module. Since microservices are small in size, programmers can develop, test, and maintain services experiencing only very short re-deployment downtimes
    * S4: microservices naturally lend themselves to containerisation [56], and developers enjoy a high degree of freedom in the configuration of the deployment environment that best suits their needs (both in terms of costs and quality of service)
    * S5: scaling a microservice architecture does not imply a duplication of all its components and de- velopers can conveniently deploy/dispose instances of services with respect to their load
    * S6: the only constraint imposed on a network of interoperating microservices is the technol- ogy used to make them communicate (media, protocols, data encodings). Apart from that, microservices impose no additional lock-in and developers can freely choose the optimal re- sources (languages, frameworks, etc.) for the implementation of each microservice
  * In software engineering, architecture is concerned with providing a bridge between system functionality and requirements for quality attributes that the system has to meet.
  * This spike of interest contributed to an increase in the number of existing software architecture patterns (or generally called styles), so that some form of classification was then required. This problem was tackled in one of the most notable works in the field, the book “Software Ar- chitecture: Perspectives on an Emerging Discipline” by Garlan and Shaw
  * The classic by Gamma et al. [36] covers the design of object-oriented software and how to translate it into code presenting a collection of recurring solutions, called patterns.
  * Attention to separation of concerns has recently led to the emergence of the so-calledComponent- based software engineering (CBSE)
  * The last decade has seen a further shift towards the concept of service first [81] and the natural evolution to microservices afterwards
  * Service-Oriented Computing (SOC) is an emerging paradigm for distributed computing and e-business processing that finds its origin in object-oriented and component computing
  * In SOC, a program — called a service — offers functionalities to other components, accessible via message passing
  * Services decouple their interfaces (i.e. how other services access their functionalities) from their implementation
  * The benefits of service-orientation are:
    * Dynamism - New instances of the same service can be launched to split the load onthe system;
    * Modularity and reuse - Complex services are composed of simpler ones. The same services can be used by different systems;
    * Distributed development - By agreeing on the interfaces of the distributed system, distinct development teams can develop partitions of it in parallel;
    * Integration of heterogeneous and legacy systems - Services merely have to implement standard protocols to communicate
  * The idea of componentization used in service-orientation can be partially traced back to the object-oriented programming (OOP) literature; however, there are peculiar differences that led to virtually separate research paths and communities. As a matter of fact, SOC at the origin was - and still is - built on top of OOP languages, largely due to their broad diffusion in the early 2000s
  * However, the evolution of objects into services, and the relative comparisons, has to be treated carefully since the first focus on encapsulation and information is hidden in a shared-memory scenario, while the second is built on the idea of independent deployment and message-passing. It is therefore a paradigm shift, where both the paradigms share the common idea of componentization
  * The next step is adding the notion of business capability and therefore focusing analysis and design on it so that the overall system architecture is determined on this basis
  * The first “generation” of service-oriented architectures (SOA) defined daunting and nebulous requirements for services (e.g., discoverability and service contracts), and this hindered the adop- tion of the SOA model
  * Microservices are the second iteration on the concept of SOA and SOC
  * The aim is to strip away unnecessary levels of complexity in order to focus on the programming of simple services that effectively implement a single functionality
  * Like OO, the microservices paradigm needs ad-hoc tools to support developers and naturally leads to the emergence of specific design patterns
  * First and foremost, languages that embrace the service-oriented paradigm are needed (instead, for the most part, microservice architectures still use OO lan- guages like Java and Javascript or functional ones). The same holds for the other tools for development support like testing suites, (API) design tools, etc.
  * The microservices architecture appeared lately as a new paradigm for programming applications by means of the composition of small services, each running its own processes and communicating via light-weight mechanisms
  * This approach has been built on the concepts of SOA [51] brought from crossing-boundaries workflows to the application level and into the applications architec- tures, i.e. its Service-Oriented Architecture and Programming from the large to the small.
  * The term “microservices” was first introduced in 2011 at an architectural workshop as a way to describe the participants’ common ideas in software architecture patterns [33]
  * Microservices now are a new trend in software architecture, which emphasises the design and development of highly maintainable and scalable software
  * Microservices manage growing com- plexity by functionally decomposing large systems into a set of independent services
  * By making services completely independent in development and deployment, microservices emphasise loose coupling and high cohesion by taking modularity to the next level
  * It also comes with a bundle of problems that are inherited from distributed systems and from SOA, its predecessor. The Mi- croservices architecture still shows distinctive characteristics that blend into something unique and different from SOA itself:
    * Size - The size is comparatively small wrt. a typical service, supporting the belief that the architectural design of a system is highly dependent on the structural design of the organization producing it. Idiomatic use of the microservices architecture suggests that if a service is too large, it should be split into two or more services, thus preserving granularity and maintaining focus on providing only a single business capability. This brings benefits in terms of service maintainability and extendability
    * Bounded context - Related functionalities are combined into a single business capability, which is then implemented as a service.
    * Independency - Each service in microservice architecture is operationally independent from other services and the only form of communication between services is through their pub- lished interfaces
  * The key system characteristics for microservices are: 
    * Flexibility - A system is able to keep up with the ever-changing business environment and is able to support all modifications that is necessary for an organisation to stay competitive on the market
    * Modularity - A system is composed of isolated components where each component con- tributes to the overall system behaviour rather than having a single component that offers full functionality
    * Evolution - A system should stay maintainable while constantly evolving and addingnew features
  * bzgl Teams:
    * Back in 1968, Melvin Conway proposed that an organisation’s structure, or more specifically, its communication structure constrains a system’s design such that the resulting design is a copy of the organisation’s communication patterns [23]. The microservices approach is to organise cross- functional teams around services, which in turn are organised around business capabilities [33]. This approach is also known as “you build, you run it” principle, first introduced by Amazon CTOWerner Vogels [38]. According to this approach, teams are responsible for full support and development of a service throughout its lifecycle
  * Each microservice may represent a single business capability that is delivered and updated in- dependently and on its own schedule
  * Discovering a bug and or adding a minor improvement do not have any impact on other services and on their release schedule (of course, as long as back- wards compatibility is preserved and a service interface remains unchanged)
  * essentially microservices are meant to be used with continuous delivery and continuous integration, making each stage of delivery pipeline automatic. By using automated continuous delivery pipelines and modern container tools, it is possible to deploy an updated version of a service to production in a matter of seconds
  * microservicesmay cooperate in order to providemore complex and elaborate functionalities. There are two approaches to establish this cooperation – orchestration [54] and choreography [69]. Orchestration requires a conductor – a central service that will send requests to other services and oversee the process by receiving responses.Choreography, on the other hand, assumes no centralisation and uses events and publish/subscribemechanisms in order to establish collaboration. These two concepts are not new to microservices, but rather are inherited from the SOA world where languages such asWS-BPEL [66] andWS-CDL [82] have long represented the major references for orchestration and choreography respectively (with vivid discussions between the two communities of supporters).
  * Prior to the advent of microservices and at the beginning of the SOA’s hype in particular, orchestration was generally more popular and widely adopted, due to its simplicity of use and easier ways to manage complexity. However, it clearly leads to service coupling and uneven distribution of responsibilities, and therefore some services have a more centralising role than others.
  * Microservices’ culture of decentralisation and the high degrees of independence represents instead the natural application scenario for the use of choreography as a means of achieving collaboration. This approach has indeed recently seen a renewed interest in connection with the broader diffusion of microservices in what can be called the second wave of services


### MSA: timeouts

* see "Laura Bocchi, Julien Lange, and Nobuko Yoshida. Meeting deadlines together. In CONCUR, pages 283–296, 2015"

### MSA: faults

* see "Sara Capecchi, Elena Giachino, and Nobuko Yoshida. Global escape in multiparty sessions. Mathematical Structures in Computer Science, 26(2):156–205, 2016"
* see "Marco Carbone. Session-based choreography with exceptions. Electr. Notes Theor. Comput. Sci., 241:35–55, 2009"

### MSA: dynamic binding

* important!
* see "Fabrizio Montesi and Nobuko Yoshida. Compositional choreographies. In CONCUR, pages 425–439, 2013"

### MSA: parametric behaviour

* important!
* see "Marco Carbone, Sam Lindley, Fabrizio Montesi, Carsten Schürmann, and Philip Wadler. Coherence generalises duality: A logical explanation of multiparty session types. In CONCUR, 2016. To appear"
* see "Nicolas Tabareau, Mario Südholt, and Eric Tanter. Aspectual session types. In MODULARITY, pages 193–204, 2014"

### Curcuit breakers

* laut [@MW16]
  * have been popularised in (book) "Release it! Design and Deploy Production-Ready Software (Pragmatic Programmers). 2007"
  * Akka provides a circuit breaker implementation that supports basic configuration parameters
    * => hat somit Scala (und vll Spring Boot) ebenfalls inherent einen Curcuit Breaker eingebaut im Actor Modell?
  * Hysterix is much more flexible and currently one of the reference solutions; it supports rolling statistics, fallback mechanisms, resource control and control over the states and transitions of circuit breakers

### Service Discovery

* see [@MW16] for example solutions/implementations/technologies 

### Actors vs MS

* [@AH85] basic actor constructs:
  * actor = agents which carries out its actions in response to accepting a Communication
  * actions are:
    * send Communication
      * tun MS auch
    * create more actors
      * ist jetzt eher unüblich, außer vll von irgendeinem scaling process
    * specify the *replacement behaviour* (replecement implements local state change while preserving referential transparency; replacement process is intrinsically concurrent)
      * MS ???
  * order of communications are delivered nondeterministic
  * actor-based architecture, only constraint on the speed of execution stem from the logical dependencies is rhe computation and the limitations imposed by the hardware resources
  * all actors in a system carry out their actions concurrently
    * MS in MSA auch alle concurrent
  * has the implications that message passing can be used to spawn concurrency
  * in the actor model, the delivery of all communications is guaranteed
  * the problem of shared resources with changing local state is dealt with by providing an object.oriented environment without the sequential bottle-neck caused by assignment commands
  * "it is reasonable to expect that large-scale parallel systems will be composed of independently developed and maintained modules. Such systems will be open-ended and continually undergoing change"
    * im prinzip sind die MS jetzt relativ genau das was da beschrieben ist
  * characteristics of open systems:
    * continuous availability: a system may receive communications from the external environment at any point in time. there is no closed-world hypothesis
      * bei REST ja, bei anderem kommunikationsmodell (zB space, queue) an sich nicht zwingend, denn hier entnehmen die MS ja aktiv nachrichten
    * Modularity: the inner workings of one subsystem are not available to any other system; the behaviour of a system must be characterized only in terms of its interaction with the outside
      * MS nur via REST interface (oder was auch immer verwendet wird) ansprechbar
    * extensibility: it is possible for a system to grow. in particular, it is possible to compose different systems in order to define larger systems
      * genau das prinzip von MSA, wo mehrere MS zusammengehängt werden 

### Objects vs MS programs

* "Essential concepts" of Objects in [@Sny93; @Bla13]:
  * obj. embodies an abstraction
    * MS tun das auch
  * obj. provides services
    * liegt bei MS im namen
  * clients issue requests for those services
    * MS werden angesprochen für ihre services, zB via REST
  * obj. are encapsulated
    * MS sind programme, daher encapsulated
  * requests identify operations
    * MS der zB via REST angesprochen wird, muss request die operation in der URL + PUT/GET/etc codieren
  * requests identify objects
    * Request muss irgendwie MS beschreiben, von dem angefordert wird (zumindest abstrakt via nicht-eindeutigen namen, damit dann ggf von Gateway auf einen konkreten dispatched werden kann)
  * new obj. can be created
    * neue MS anlegen, automatisch oder manuell
  * same operation of distinct objects can have different implementations and observably different behaviour
    * neue Programmversion von MS bringt natürlich neue Impl., und kann auch beobachtbar anderes Verhalten zeigen (zB zusätzliche aufrufe anderer Services, etc); muss halt immer noch die selbe erwartete Dienstleistung bringen, dann beeinfluss es das Gesamtsystem nicht, genau wie bei Untertypen
  * obj. can be classified in terms of their services (interface hierarchy __?__)
    * MS ???
  * obj. can share a common implementation (multiple instances)
    * mehrere instanzen des selben MS für horizontale skalierung, benötigt Gateway; essentielles argument für MSA!
  * obj. can share partial impl. (impl. inheritance or delegation)
    * delegation in MS ist service composition!
* [@Giv14]
  * Programmig objects can be interpreted as processes (example via new Operator in C++, creating Object on remote Machine)
  * Encapsulation, which is an important feature of object-oriented programming, clarifies relationships between objects, facilitating parallelization of method execution across distinct objects
    * MS sind encapsulated, und deren Methoden (= services) können durch dieses Wissen ebenfalls leicht parallelisiert werden

### Active Objects vs MS (inkl Gateways)

* [@LS95] definiert Active Object pattern als: "decouples method execution from method invocation in order to simplify synchronized access to a shared resource bymethods invoked in different threads of control"
  * genau dass, was auch in MSA passiert. 1) der MS an sich, denn auch hier bietet die REST schnittstelle eine Entkoppelung
  * Weiters wird in dem Artikel noch diese Erklärung gebracht: "To illustrate the Active Object pattern, consider the design of a connection-oriented Gateway. A Gateway decouples cooperating components in a distributed system and allows them to interact without having direct dependencies among each other"
    * Wieder genau MSA: connection-oriented gateway; decouples cooperating components in DS; interact without direct dependencies
  * Im Artikel werden noch konkrete Beispiele (zB Input/Output Handler etc) gebracht -> gut für mehr Text
* [@LS95] Use the Active Object pattern when
  * The design and implementation of a concurrent program can be simplified
    * Mein these ist auch, dass MSA hinsichtlich Concurrency leichter zu erdenken sind als andere Modelle
  * Multiple threads of control require synchronized access to shared data
    * Datastore-MS bieten ebenfalls einen synchronized data access (deren DB sind ja jeweils shared data)
  * The order of method execution can differ from the order of method invocation
    * Bei einem REST-based (zB Spring) MS, kann ich mich nicht darauf verlassen, dass der erste REST aufruf auch der erste ist der ausgeführt wird (je nachdem was im internen Spring Concurrency Modell zuerst dran kommt)
  * The operations on a shared object are relatively coarse-grained
    * coarse-grained ist eine gewünschte Eigenschaft von MSA
* [@LS95] The Active Object pattern offers the following benefit
  * Enhance application concurrency while reducing synchronization complexity
    * Wieder genau MS
  * Leverage parallelism available from the hardware and software platform
    * Auch wieder MS, "inherente Parallelität" wie ich das gerne nenne, wenn die Hardware Multi-core bzw Multi-Maschine
* [@LS95] The Active Object pattern has the following drawbacks
  * It potentially increases context switching, data movement, and synchronization overhead
  * It may be difficult to debug programs containing active objects due to the concurrency and non-determinism of the Scheduler 
* Neue Service-oriented Languages bauen auf der Idee von Active Objects auf (und diese Sprachen bauen ja im Prinzip MS auf Sprachebene nach). **In welchen Quellen stand das?**
* [@GB99] beschreibt aspekte von active objects:
  * Proactivity: an agent (= active object) has a goal; it does not simply act in response to messages from other agents (im gegensatz zum Actor model)
    * manche MS sind auch genau dafür da, während andere nur reaktiv sind (eine genaue unterscheidung gibts hier meines wissens nach in der literatur noch nicht)
  * Sociability: agents can interact by speaking different languages (hier ist was komisch-altes gemeint)
    * aber in MSA können die MS auch 1) in verschiedenen sprachen geschrieben sein, und 2) via verschiedene kommunikationsmodelle reden (REST, message queues, spaces, etc)
  * Adaptability: komisches zeugs


### Subtyping vs neue MS Version

* Subtyping: Ein Typ ist dann ein Untertyps eines Obertyps, wenn er überall dort verwendet werden kann, wo der Obertyp erwartet wird
* Vorteil von MSA: Es kann jederzeit eine neue Instanz (Update auf neue Programversion) eines MS gestartet werden, ohne das Gesamtsystem der MSA durcheinanderzubringen, solange sich der MS bzgl seiner Schnittstelle genau so verhält wie seine alte Version
* Update von MS <=> Subtype von Klassen/Objekten/etc
* Praktischer Vergleich: Dependency Injection
  * In Java Enterprise / Spring kann mittels XML basierter DI die verwendete Implementierung eines Interface Typs ausgetauscht werden, ohne das Gesamtsystem neu zu kompilieren, dh __Austausch (= Update) der Funktionalität__ ohne die gesamte Application zu ändern
  * Update und re-deploy eines MS, welcher die selbe Aufgabe erfüllt, wie zB

### Inheritance

* [@Giv14]
  * "Having defined processes as programming objects, it is now straighforward to derive new processes using previously defined processes"


## Concurrency and Parallelism in Microservice Architectures

MSA per design Concurrent

Wenn Service richtig geschrieben, kann ich diese Scalieren indem von jedem Service entsprechend mehr Instanzen laufen (Parallel). Benötigt natürlich API Gateway um Aufgaben zu verteilen, was aber über den Scope dieser Arbeit hinaus geht.

Dh. MSA sowohl Concurrent wie auch Parallel. MSA lösen also wieder nur Konzepte die auch ProgLang lösen (traditionell eher concurrent als parallel, aber das ist eine Sache der Sprachen).

-> Ergo nur deswegen MSA, weil Sprachen diese Konzepte nicht gut genug umsetzen

-> Tatsächlich ist in traditionellen Sprachen Concurrency noch eher umsetzbar, tatsächlich parallele Ausführung von Teilen (zB Actor == MicroService) sehr schwer, schon gar keine Verteilung im Netzwerk.
  -> könnten hier VMs aushelfen
  -> nennt man das Location-Transparency

## Summary

# Prototypical Comparison of a Concurrency-based and a Microservice-based implementation for the same Scenario

## Scenario

Anforderungen an das Szenario; welche Showcases müssen demonstriert werden können:

* Update von Funktionalität ohne Änderung des Gesamtsystems
  * Deployment einer einzigen neuen MS-Programversion
  * Update durch neuen Untertyp und Deployment mittels Dependency Injection
* Synchronized access to shared data (zB die Fabrikshalle)
  * Datastore MS, der von mehrere MS gleichzeitig benutzt werden kann
  * Actor/ActiveObj/WasAuchImmer, welches die Sync to irgendeinem Datenspeicher übernimmt
* Coarse grained operations on shared "objects" (in active objects), bzw auf services allgemein
  * Kommunikation mit einem Roboter ist wohl ein einfaches Beispiel (via Object oder via Service Kommunikation)
* Kein shared state
  * Alle Actors/ActiveObbj/WasAuchImmer hat eigenen Datenspeicher
  * MS haben eigenen State (und möglicherweise sogar eigene DB)
  * Gemeinsame Datenspeicher via DataStore "pattern" (ist das irgendwie als echtes Pattern festgehalten?)
* reusing, orchestration, aggrgation
  * "every MS can be reused, orchestrated and aggregated with others"
    * reuse: mehrere instanzen des selben MS starten
    * orchestration: ?
    * aggregation: ?
  * passendes gegenstück zu concurrency model/objecten/etc?
    * reuse
    * orchestration
    * aggregation
* Bounded context
  * MS: "Related functionalities are combined into a single business capability; implemented as a service"
  * OOP: __Wie lauten die genauen definitionen, zB aus dem Buch von Meyer??__: 1) sich nur um eine Concern kümmern; 2)
* Size
  * OOP: nicht zu groß, sonst mehrere klassen; für maintainability; OOP generell für extendibility
* Technology heterogeneity
  * in MSA können unterschiedliche MS in unterschiedlichen programmiersprachen geschrieben werden: wäre interessant für implementierung, einen service nicht in Java (zB Scala, Clojure, Ruby, irgendwas anderes) zu schreiben; idealerweise einen der nicht aufwändig ist!
  * nicht machbar in OOP etc


~TODO
Hier beschreibe ich kurz die "Angabe" zu meinen Implementierungen. Es soll durch eine Geschichte motiviert werden
~

In order to base our implementations on a realistic scenario, we motivate the generel setting the implementations could actually be put to their use in a short summary:

~ {font-style: italic; width: 40%; margin: 2ex;}
A long time ago in a galaxy far, far away....

The Republic is crumbling under attacks by the ruthless Sith Lord, Count Dooku. His Separatist Droid Army is produced automatically inside Smart Factories somewhere in the Outer Rim. All production steps are performed by autonomouse droids. This highly concurrent system will lead to the ultimate victory over the Jedi....
~

In this scenario, we simulate the production processes of such a *smart factory*. A variaty of coordination problems therefore have to be handled. The following actors (here, we mean the "droid" actors, not actors as in the actor model) are involved:

* customers (separatist leaders ordering battle-droids)
* management droids
* logistic droids
* assembly droids
* quality-assurance droids
* delivery droids

The following poducts (battle droid models) can be produced inside the smart factory:

~TODO
droids siehe: http://starwars.wikia.com/wiki/Separatist_Droid_Army
~

* B1 battle droid
* B2 super battle droid
* Droideka
* Super tactical droid


We created two prototypical impelementations simulating the descripated *smart factory*. One implementation is written in Erlang using its actor model. The other implementation is written with a microservice architecture, in [**Java ?**] / [**Go ?**]

## Actors vs. autonomous Agents

In microservive architectures, it is not usual for services to act as autonomous *active* agents. Some of the described droids in our scenario show activate (**TODO** hier ein wort für "selbst aktiv werdend") behaviour. For example, the logistic droids decide themselves which work step they will [**TODO** auswählen/als nächstes verfolgen/sowas in der art] perform next. 

On the other hand, the actor model is considered to consist of *passive*, that is *reactive*, components. 

[**TODO** Hier sollte ich dann irgendwie probleme zwischen actor model actors und agents besprechen, und dabei die literatur irgendwie etwas miteinbebziehen] The movements from active objects towards *active agents* has be discussed in [@GB99]. The problem we are facing is, that 



# Recommendations


# Discussion


# Outlook

~ Epigraph { caption: "Niels Bohr" }
Predicition is very difficult, especially about the future.
~

# Conclusion

[BIB]

<!-- TODO glossar, nomenclature, index -->

<!-- We need to close the HTML class we opened right at the top -->
~ End MainPanel
