Title             : Concurrent Programming with Actors and Microservices
Subtitle          :
Author            : Maximilian Irro
<!--Email             : max@irro.at-->
Copyright         : Maximilian Irro, 2018
Title Footer      : 2018
Subtitle EN       : &subtitle;
Subtitle DE       : &subtitle;
Author Gender     : male
Author Pretitle   :
Author Posttitle  : BSc BSc
Author Address    : Pfalzstra{\ss}e 10, 5282 Ranshofen
Regnumber         : 1026859
Curriculum EN     : Software Engineering \& Internet Computing
Curriculum DE     : Software Engineering \& Internet Computing
Advisor           : Franz Puntigam
Advisor Gender    : male
Advisor Pretitle  : Ao.Univ.Prof. Dipl.-Ing. Dr.
Advisor Posttitle : 
Subject           : Concurrent Programming
Keywords          : concurrency, actor model, microservices
Thesis Type       : master <!-- bachelor / master / doctor / phd-school -->
Bachelor Thesis   : false
Master Thesis     : true
Doctor Thesis     : false
Master Degree     : dipl. <!-- dipl. / rer.nat. / rer.soc.oec. / master -->
Doctor Degree     : <!-- rer.nat. / techn. / rer.soc.oec. -->
Script            : style/mathjax-font.js
Toc depth         : 3
Cite All          : False
Bibliography      : dipl
Bib style         : style/keynat.bst

<!--Bib style : plainurl <!-- TODO shows __all__ URLs + DOIs (ungly) -->
<!--Bib style : plainnat-->
<!--bib style: unsrtnat <!-- TODO remove URLs in bibtex when there is a DOI -->




[INCLUDE=style/vutinfth]


<!-- Experimental MiniTOC support 
Package        : minitoc
Tex Doc Header :
    \dominitoc % MiniTOC initialization
    \faketableofcontents
H1 { tex-cmd-outer-after: "\minitoc" }
-->

<!-- define some unicode characters -->
top: &#8868;
rightleftharpoons: &#8652;
rightleftarrows: &#8644;
Tex Header :
  \mdDefineUnicode{8868}{\ensuremath{\top}}
  \mdDefineUnicode{8652}{\ensuremath{\rightleftharpoons}}
  \mdDefineUnicode{8644}{\ensuremath{\rightleftarrows}}

<!--  Blockquotes for chapter headers -->
Package      : epigraph
Tex Header   : 
  \epigraphsize{\small\itshape}
  \setlength\epigraphwidth{6cm}
  \setlength\epigraphrule{0pt}
Epigraph {
  replace:"~ Begin TexOnly&nl;\
           ~ Begin TexRaw&nl;\
             \epigraph{\textit{&source;}}{--- &caption;}%mdk&nl;\
           ~ End TexRaw&nl;\
           ~ End TexOnly&nl;\
           ~ Begin HtmlOnly&nl;\
            <blockquote>&nl;\
              <p class='epigraph-body'>&source;</p>&nl;\
              <footer class='epigraph-footer'>— &caption;</footer>&nl;\
            </blockquote>&nl;\
           ~ End HtmlOnly"
}
.epigraph { 
  max-width:50%; 
  margin-left: auto; 
  margin-right: 0; 
  margin-top: 30px;
  margin-bottom: 70px;
}


<!--
Bibl { 
  before: "# &name-references; { -; .heading-references; font-family: tex-cmd-sffamily }&nl;";
}
-->



<!-- change some fonts used in latex, my personal preference -->
@if tex {
  dt       { font-family: sans-serif }
  .tocitem { color:black }
}

<!-- applying sffamily to the references is a bit more complicated -->
Bibliography { tex-cmd-outer-before: "\mdsetrefname{\textsf{&name-references;}}%mdk&nl;" }
<!--Bibl { font-size: small }-->
dt           { margin-top:1ex }
dd           { margin-bottom:1ex }
blockquote   { font-style: italic; }
.tocblock2   { margin-bottom:1em }
.figureline  { display: none }

<!-- arbitrary helper classes, while work in progress -->
.litnote, .lit, .literature { 
  background-color: LightGray;
  padding: 1ex;
}
.mind {
  background-color: #cbffcb;
  before="[";
  after="]"
}
.quelle {
  color: red;
  before="[";
  after="]"
}
.todo, .important, .delete, .red {
  color:red
}
.green { color: green }

<!-- TODO do I want to have the same color in PDF and HTML?
.cite-number {
  color:navy;
}
-->

<!-- TODO brauch ich das hier?
@if html {
  Name Contents   : \/

  Section Depth : 1
  Css           : style/webpaginated.css
  Script*       : style/webpaginated.js
}
-->

<!--
@if not html {
  Name Contents   : Inhaltsverzeichnis
}
-->

@if not (tex) {
  Bib Search Url : scholar.google.at
}

<!-- Rewrite the H1 rules for PDF output, to fix the template -->
<!--
@if tex {
  h1-endperiod :
  h1-format    : 
  h1 { before: "[&h1-format;]{.h1-before}" }
}
@if html {
  h1 { label:"@h1"; before:"&label;.&ensp;" }
}
-->

CSS Header      :
  @import url(https://fonts.googleapis.com/css?family=Crimson+Text);
  @import url(https://fonts.googleapis.com/css?family=Source+Code+Pro);
  body.madoko {
    font-family: "Crimson Text", serif;
    font-size: 16px;
    max-width: 34em; /* reduce to: 34em */
  }
  .madoko code, .madoko pre {
    font-family: "Source Code Pro", monospace;
  }
  .madoko .math-rendering {
    color: black;
  }
  hr.figureline.madoko {
    display: none;
  }
  .toc a, .toc a:visited { 
    color: #0000EE;  
  }
  .a, a:visited {
    color: #0000EE;  
  }
  .titleheader {
    max-width: 80%;
  }
  .epigraph-body { 
    -webkit-margin-before:0; 
    -webkit-margin-after:0;
  }
  .epigraph-footer { 
    float:right; 
    font-style:normal;
  }
  figure {
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
  }
  .figure > p {
    -webkit-margin-before: 0;
    -webkit-margin-after: 0;
  }
  /* TODO do I want the paper style for paragraphs? 
  p {
    margin-bottom: 0;
  }
  p + p {
    text-indent: 1.5em;
    margin-top: 0; 
  }
  */


<!-- HTML -->
~ Begin HtmlOnly
[TITLE]

<!-- 
~ Begin Abstract
TODO
~ End Abstract
-->

[TOC]

[TOC=figures]
[TOC=tables]
~ End HtmlOnly

<!--
~ HtmlOnly
A PDF Version of this thesis is available at [max.irro.at/pub/dipl/thesis.pdf](http://max.irro.at/pub/dipl/thesis.pdf)
~
-->

&pagebreak;
~ Begin TexOnly
~ Begin TexRaw
\vspace*{\fill}
~ End TexRaw
~ End TexOnly
~ Begin Center

*To whom it may concern*

~ End Center
~ Begin TexOnly
~ Begin TexRaw
\vspace*{\fill}
~ End TexRaw
~ End TexOnly
&pagebreak;


<!-- TeX -->
~ Begin TexOnly
~ Begin TexRaw
\begin{danksagung*}
~ End TexRaw
~ End TexOnly

<!-- HTML -->
~ Begin HtmlOnly
# Danksagung { -; toc:clear }
~ End HtmlOnly

[TODO]{.important}

<!--
Es gilt einigen wenigen meinen Dank auszusprechen:

* Meinen Eltern und meiner Schwester, die mich in meinem Studium immer unterstützt haben, obwohl ich viel zu selten anrufe.
* Meinem Betreuer, Franz Puntigam, für die guten Ratschläge im Zuge dieser Arbeit, die sich alle bewährt, und für all das, was er gelehrt und ich gelernt habe.
* Theresa und Alex, für das Korrekturlesen. Ich weiß, es war nicht leicht.
-->

<!-- TeX -->
~ Begin TexOnly
~ Begin TexRaw
\end{danksagung*}
\begin{kurzfassung}
~ End TexRaw
~ End TexOnly

<!-- HTML -->
~ Begin HtmlOnly
# Zusammenfassung { -; toc:clear }
~ End HtmlOnly

[TODO Abstract übersetzen]{.important}

<!-- TeX -->
~ TexOnly
~~ TexRaw
\end{kurzfassung}
\begin{abstract}
~~
~ 

<!-- HTML -->
~ Begin HtmlOnly
# Abstract { -; toc:clear }
~ End HtmlOnly

Common problems require applications to manage multiple concerns simultaneously. A convenient approach is the concept of concurrent programming. In this thesis, we investigate two different approaches for introducing concurrent computational units into software architectures. One is the *Actor model* describing theoretically well-known constructs supporting concurrent, parallel and distributed execution in a transparent way. The other is an architectural style based on so-called *Microservices*, a recent trend that gained academic and industrial popularity. It facilitates many of the old Unix principles for composing complex functionality through small, independent, highly cohesive and loosely coupled service executables interoperating via lightweight, technology heterogenous messaging channels. Their deployment modality conceives concurrent execution through the operating system scheduler or network distribution respectively. We argue that both approaches share many conceptual similarities and few but significant differences which are affecting concurrent programming concerns, resulting from the fact that Actors follow a strict theoretical concept, while Microservices, in their current deployment focused perception, are constrained merely by a set of rather loose principles, not more than best practices. Based on an exemplary scenario it is evaluated how concurrent software systems can be composed with Actors or Microservices utilizing their respective characteristics and resulting possibilities. Finally, argumentations for both approaches to concurrent programming are formulated and a shift in the notion of conceiving Microservices towards a stricter theoretical foundation we see closer to the Actor model is motivated. 

~ TexOnly
~~ TexRaw
\end{abstract}
% Select the language of the thesis, e.g., english or naustrian.
\selectlanguage{english}
~~
~ 

# Preface / Authors Note { -; toc:clear; }

Back in early 2016, I came across a comment thread discussion[^fn-hackernews] on the famouse "HackerNews" board (*news.ycombinator.com*) where someone eventually claimed:

> "You'll never hear an Erlang programmer even talk about microservices because they are a solution to a problem that doesn't exist in Erlang, or any sufficiently concurrent language for that matter". 

First I thought this was asking for a "`[citation needed]`"[^fn-xkcd], but it was followed by a second statement that instead started to intrigued me:

> "The architecture of an idiomatic Erlang-based system is essentially a microservice architecture."

But is it really? I was wondering. It would have some fundamental implications. Erlang is an interresting language (and we will motivate some of the reasons why in due course), and one of its basic building blocks are what it defines as *processes*. They are Erlangs version of the Actor model for concurrent programming. If the claim that any Erlang system is a microservice architecture, than these processes would mirror the microservices. And the name "process" already motivates why this might be the case. Any microservices most essential property is that it is contained within a single, dedicated (operating-system) process, and these are by nature concurrently executed on the OS level. One thing that I thought was odd though (back then at least), was that Erlangs processes are Actors, and Actors are for concurrency (like threads), while a microservice by its nature is really a component of a distributed system. And if concurrency primitives can meet the concerns a distributed system architecture style can, then why bother with all the hassles that usually come with distributed programming anyway?

Having been passionate about microservice architectures as an alternative to ever growing monoliths for some time back then, this idea would remain in the back of my head and pop up occasionally to think about when there was time to think about such things - like on public transport.  

Over a year later, I've read an article[^fn-qcon] about a presentation given by Joe Duffy, former Director of Engineering for languages and compilers at Microsoft, that stated:

> "Duffy expects to see a return of distributed programming with increasingly fine-grained distributed systems that will make systems look more and more like classic concurrent systems."

Now, these fine grained distributed systems Duffy is speaking about are what we have dubbed microservice architectures at the moment, and based on the previous claim, the "classic concurrent systems" they resemble would look like idiomatic Erlang systems, that is Actor-based concurrent systems in general.

From the first claim and the principles of microservice design, we can argue that microservice architectures qualify for such fine grained distributed systems Duffy is speaking about. And this would mean that the "classic concurrent systems" these distributed systems resemble would look like idiomatic Erlang systems, that is Actor-based concurrent systems in general.

And this, I thought, was worth some further investigation. The results of this investigation is this thesis. May it spark in you the idea that you might not want another microservice architecture for your next project so easily.

Vienna, June 2018

Maximilian Irro

[^fn-hackernews]: <https://news.ycombinator.com/item?id=8665690>
[^fn-xkcd]: <https://xkcd.com/285/>
[^fn-qcon]: <https://www.infoq.com/news/2017/03/distributed-programming-qcon>


~ TexOnly
[TOC]
<!--
[TOC=figures]
[TOC=tables]
-->

~~ TexRaw
% Switch to arabic numbering and start the enumeration of chapters in the table of content.
\mainmatter
~~
~ 

[INCLUDE=ch1-introduction]
[INCLUDE=ch2-concurrency]
[INCLUDE=ch3-actor-model]
[INCLUDE=ch4-microservice-paradigm]
[INCLUDE=ch5-scenario]
[INCLUDE=ch6-actor-impl]
[INCLUDE=ch7-microservice-impl]
[INCLUDE=ch8-evaluation]
[INCLUDE=ch9-conclusion]

<!--

# Acronyms { - }

These arconyms occur throughout the thesis.

* AMQP Advanced Message Queue Protocol
* AO Active Object
* CMF Cloud Management Framework
* DO Distributed Object
* FIFO First In First Out
* IPC Inter-Process Communication
* IoC Inversion of Control
* JVM Java Virtual Machine
* LB Load Balancing
* MS Microservice
* MSA Microservice Architecture
* OOP Object-oriented Programming
* OS Operating System
* PID Process Identifier
* REST Representational State Transfer
* RPC Remote Procedure Call
* SOA Service-oriented Architecture
* SoC Separation of Concerns
* SOC Service-oriented Computing
* SOP Service-oriented Programming
* SRP Single Responsibility Principle
* STM Software Transactional Memory
* URI Uniform Resource Identifier
* URL Uniform Resource Locator
* VM Virtual Machine

# Glossary { - }

* Akka
  : TODO

* Microservice Architecture (MSA)
  : TODO

* Message oriented middleware (MOM)
  : TODO

-->

[BIB]

<!-- TODO glossar, nomenclature, index -->

