# [@Has16] Microservices and Their Design Trade-offs: A Self-Adaptive Roadmap

  * Abstract—Migrating to microservices (microservitization) en-ables optimising the autonomy, replaceability, decentralised governance and traceability of software architectures.
  * Despite the hype for microservitization , the state of the art still lacks consensus on the definition of microservices, their properties and their modelling techniques.
  * One such design problem is finalising the optimal level of granularity of a microservice architecture. Related design trade-offs include: balancing the size and number of microservices in an architecture and balancing the non-functional requirement satisfaction levels of the individual microservices as well as their satisfaction for the overall system.
  * We therefore view microservitizationas a form of servitization where services/components are transform into microservices —- a more fine-grained and autonomic form of services —- to add long-term value to the architecture.
  * Isolating business functionalities aims at optimis-ing the autonomy and replaceability of the service(s).
  * Despite the hype and the business push towards mi-croservitization [1], there is a lack of academic consensus regarding the definition and properties of the paradigm shift and corresponding design patterns for microservices [4].
  * Among these problems is finalising the level of granularity of a microservice too early. "Splitting too soon can make things very difficult to reason about. It will likely happen that you (the software architect) will learn in the process. [1]."
  * the size versus number of microservices [4]
  * the local versus global non-fuctional requirement satisfaction trade-off.
  * aggressive isolation of business functionalities is not necessarily ideal for all scenarios of the environment.
  * Due to the recency of the research area, there is a multitude of ways in which microservices have been defined and modelled. Clear understanding of the paradigm shift, itsmotivations, and implications are prerequisites for advancing microservitization. We have reviewed the state of art and practice to capture the different ways in which microservices can be defined and modelled.
  * We therefore view microservices as autonomic, repleace-able and deployable artefacts of microservitization that encapsulate fine-grained business functionalities presented to system users through standardised interfaces. The autonomy of these artefacts allows for governing them in a decentralised manner and tracing their changes.
  * Among the crucial and non-trivial decision problems (DPs) that constitute addressing the size/number and the local/global NFRs satisfaction trade-offs are the following:
    * When does decomposing a microservice into more fine-grained ones achieve the required optimality for both trade-offs?
    * When does merging several fine-grained microser-vices into a coarse-grained one achieve the required optimality for both trade-offs?
    * When should the current level of granularity be kept without further merging or decomposition?
