# [@Kar09] Actor frameworks for the JVM platform: a comparative analysis

* The problem of programming scalable multicore processors has renewed interest in message-passing languages and frame-works. Such languages and frameworks are typically actor-oriented, implementing some variant of the standard Actor semantics.
* The shared memory model is unnatural for developers, leading to pro-grams that are error-prone and unscalable [2]
* Either to simplify the implementation, or to improve performance, many actor-oriented frameworks compromise one or more semantic property of the standard Actor model. For example, execution efficiency may be improved by unfair scheduling, or by implementing message-passing by passing references rather than copying messages.
* A programming frameworks can be analyzed along two di-mensions: the linguistic support the framework provides for programmers, and the efficiency of executing code written using the framework. In case of the actor frameworks, lin-guistic support comes in two forms. First, by supporting the properties of the Actor model, a framework can enable scal-able concurrency which facilitates compositional program-ming. Second, by providing programming abstractions that simplify expression of communication and synchronization between actors, a framework can allow programming idioms to be expressed in succinct notation.
* As mentioned earlier, many actor-oriented frameworks compromise one or more of the semantic properties of actors. We discuss the significance of each of these properties in order to understand the impact of compromising the property from the “ease of programming” point of view (§3). We then describe some common communication and synchronization abstractions in actor frameworks (§4). Finally, we analyze the implementation mechanisms in Actor frameworks and study how the cost of providing actor properties may be mitigated (§5). Our analysis suggests that while a na¨ıve im-plementation of actor properties may be highly inefficient, a sophisticated implementation of actor framework on JVM may provide efficient execution without compromising es-sential actor properties.
* 