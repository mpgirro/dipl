# [@Han78] Distributed Processes: A Concurrent Programming Concept

* A language concept for concurrent processes without ccommon variables is introduced. These processes communicate and synchronize by means of procedure calls and guarded regions. This concept is proposed for real-time applications controlled by microcomputer networks with distributed storage.
* Real-time programs must achieve the ultimate in simplicity, reliability, and efficiency.
* A concurrent program consists of a fixed number of sequential processes that are executed simultaneously. A process defines its own variables, some common proce-dures, and an initial statement
* A Process may only access its own variables. These are no common variables. But a proces s may call common procedures defined either within itself or within other processes. A procedure call from one process to another is called an external request.
* Abstract Data Tapes
    * A process combines a data structure and all the possible operations on it into a single program module. Since other processes can perform these operations only on the data structure, but do not have direct access to it, it is called an abstract data structure.
    *  We have already seen that a process can function as a monitor - an abstract data type that is shared by several processes. The next example shows that a process also can simulate a class - an abstract data type that is used by a single process only.
* Each processor will contain a distributed process P and a small, fixed number of anonymous processes which are the representatives of those distributed processes that can call process P.
* What then are the merits of distributed processes? Primarily, that they are a combination of well-known programming concepts (processes, procedures, and con-ditional critical regions) which unify the class, monitor, and process concepts.
* 