# [@Lav95] Active Object -- An Object Behavioral Pattern for Concurrent Programming

* The ActiveObject pattern decouples method execution from method invocation in order to simplify synchronized access to a shared resource bymethods invoked in different threads of control
* To illustrate the Active Object pattern, consider the design of a connection-oriented Gateway. A Gateway decouples cooperating components in a distributed system and allows them to interact without having direct dependencies among each other
* This pattern enables a method to execute in a different thread than the one that invoked the method originally. In contrast, passive objects execute in the same thread as the object that called a method on the passiv object.
* The active object Gateway design resolves the following forces:
  * Simplify flow control
  * Simplifyconcurrent programming
  * Take advantage of parallelism
* Use the Active Object pattern when
  * The design and implementation of a concurrent program can be simplified
  * Multiple threads of control require synchronized access to shared data
  * The order of method execution can differ from the order of method invocation
  * The operations on a shared object are relatively coarse-grained
* The Active Object pattern offers the following benefit
  * Enhance application concurrency while reducing synchronization complexity
  * Leverage parallelism available from the hardware and software platform
* The Active Object pattern has the following drawbacks
  * It potentially increases context switching, data movement, and synchronization overhead
  * It may be difficult to debug programs containing active objects due to the concurrency and non-determinism of the Scheduler
