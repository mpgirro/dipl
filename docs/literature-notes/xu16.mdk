# [@Xu16] CAOPLE: A Programming Language for Microservices SaaS

* developing applications in the microservices architecture presents three main challenges: 
  * (a) how to program systems that consists of a large number of services running in paral-lel and distributed over a cluster of computers; 
  * (b) how to reduce the communication overhead caused by executing a large number of small services; 
  * (c) how to support the flexi-ble deployment of services to a network to achieve system load balance.
* Such an application runs in a few processes of coarse granularity. Each process implements a large block of functionality, such as receiving service requests, executing some business logic, retrieving and updating data from a database, and sending out response messages.
* One of the main barriers to the development of service oriented applications is the scalability problem. Among many dimensions of scalability, horizontal scaling plays a crucial role in cloud computing, which means replicating multiple identical copies of the processes of the application behind a load balancer
* When a system grows in scale and complexity, making changes to an appli-cation in a monolithic architecture become problematic for programmers and customers, because redeploying a new version means to restart the server, which will take a long time.
* Lewis and Fowler defined MS as an architectural style in which a single application consists of “a suite of small services, each running in its own process and communicating with lightweight mechanisms”. These services are “independently deployable by fully automated deployment machinery” [1].
* MS address the above barriers by decomposing a system into a large number of fine-grained services that are con-nected together through a communication mechanism and supported by a deployment mechanism for replicating and relocating MS in a cluster of servers. One MS’s collapse or going off line will be less likely to have devastating effect on the whole system.
* The first is how to program a large set of fine-grained services running in par-allel. The second is the need for a lightweight facility to enable MS to communicate with each other. And, finally, it needs a deployment mechanism and facility that enable ser-vices to be deployed flexibly and uninterruptively. This pa-per proposes a programming language solution to all these problems.
* For a long time, the virtual machine (VM) has been the main protagonist of cloud computing. A VM is a heavy-weight solution;
* Its main advantage is flexibility. It ena-bles services to be executed on a VM regardless of the operating system and hardware platform beneath it. Howev-er, a VM consumes system resources, so that it becomes inefficient to deploy many VMs on one server. In other words, the VM has become a bottleneck for MS.
* Container is a new technology, which overcomes the shortage of VMs.
* In summary, existing work on supporting MS has been focused on the deployment mechanism that enables MS to be easily duplicated and relocated on different servers to achieve system efficiency. These container technologies are more efficient than virtual machines because running thou-sands of containers on one virtual machine has less runtime overhead than running thousands of virtual machines,
* Our proposed solution is to develop a programming lan-guage that constructs service-oriented systems with MS as the basic building blocks that can be easily deployed to dif-ferent servers with a light-weight runtime environment simi-lar to the Java Virtual Machine.
* Here, agents means service providers just like in the real world where estate agents provide services in buying and selling proper-ties, and travel agents provide services in buying and selling air-tickets.
* In the literature, the word “service” in service-oriented architectures, and similarly its corresponding notion of “mi-croservice” in the MS architecture, has two meanings. First,a service is the functionality provided by a computer system and delivered to the users [15]. Second, the word service also refers to the computational entities that provide the ser-vices in the first sense. Here, we separate these two concepts by using the word service only to refer to the functionalities that a computational system provides, while the computa-tional entities that provide such functionality are called “agents”. By doing so, an analogy between service-orientation and object-orientation can be made clearly. Con-sequently, our programming language bears a similarity to OO programming languages.
* Moreover, by separating these two meanings of the word service, it facilitates the study of service-oriented software architectures as concerned with the composition of entities into a certain structure. This is particularly important in the study of MS architecture.
* In the context of the MS architecture, the notion of “MS” also bears two further meanings: first, MS are identical cop-ies of a service where each copy is a runtime computationalentity. Second, a MS is a template from which instances can be generated and deployed to different servers. As we will see below, our agents are autonomous, encapsulating data, operations and behavior rules, executing in parallel and co-operating with each other via asynchronous communications through a set of well-defined communication channels. These characteristics are exactly what MS services are when the word bears the meaning of computational entities.
* Like OO programming languages, CAOPLE also pro-vides an inheritance mechanism to enable “polymorphism”, i.e. agents with a number of variant functions, internal struc-tures and behaviors.
* Similar to OO, an agent may have a number of other agents (i.e. MS) as its components.
* CAOPLE provides a set of language facilities that support flexible and secure, but lightweight, communications for event-driven parallel and distributed programming that are transparent to the network structure.
* CAOPLE’s language facility supports the following communication and concurrent programming mechanisms:
  * Subscribe-and-Publish: The observe-clauses in a caste declaration actually define the communication ports that an agent listens to. It is similar to the subscribing part of the widely used subscribe-and-publish communication mechanism.
  * Event-Driven Computation: An event is generated and a “message” is sent out by an agent when it performs a public action.
  * Prevention of Data Race: As mentioned in Section 3.2, an agent’s state variables can only be modified by the agent itself. Because each agent is one thread, this prevents write-write type of data race.
  * Deployment Mechanism: An automated deployment mechanism is one of the key features of container technology.
  * Control of Communication Security: Only the message/event associated with performing a public action or the value of a public state variable are observable by other agents in the environment. To support the control of communication security, an action statement can specify a restriction on the target agents that the event is to be deliv-ered to.