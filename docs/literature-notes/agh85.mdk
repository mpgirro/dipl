# [@Agh85] Concurrent Programming Using Actors: Exploiting Large-Scale Parallelism

* no consenus has emerged on a single model of concurrency
* discussion on paradigm shift in [Pratt 83]
* "Pratt's Process Model" satisfies several properties desirable in any model of concurrent
  computation
* (Pratts?) model does not assume the existance of global states
* laws of parallel processing formulated in [Hewit and Baker 77]
* Foundational Issues (p.3-4 genauer erkl√§rt)
  - Shared Resources
  - Dynamic Reconfiguration
  Inherent Parallelism
* Actor = computational agent which caries out its actions in response to accepting a communication
* Actions are:
  - Send communication to itself or to other actors
  - Create more actors (gibt es einen MSA mechanismus der das erlaubt? Cloud management frameworks
    nicht von MS direkt angesprochen)
  - Specify the replacement behaviour
* The buffering of communication has the consequence that actor languages support recursion.
  In languages relying on synchronous communication, any recursive procedure immediately leads to deadlock (!)
* Two important obersavtions need to be made about replacement. First, replacement implements
  local state chance while preserving referential transparency of the identifiers used in a program
* [...] computation of a replacement actor is an action which may be carried out concurrently with
  other actions performaed by an actor, the replacement process is intrinsically concurrent
* In actor-based architectures, the only constraints on the speed of execution stem from the
  logical dependencies in the computation and the limitations imposed by the hardware resources
* [...] this has the implicastio that message-passing can be used to spawn concurrency: An Actor,
  in response to a communciation, may send several communications to other actors
* A "configuration" (p.7) is a instantaneous snapshot og an actor system from some viewpoint. Each
  configuration has teh following parts:
  - local state function
  - set of unprocessed tasks
  - subset of the population, called "receptionist" actors
  - set of external actors
* Open Systems (p.16)
  It is reasonable to expect that large-scale parallel systems will be composed of independently developed and maintained modules. Such systems will be open-ended and continually undergoing change [Hewitt and de Jong 85]
* Characteristics of Open Systems
  - Continuous Availability
  - Modularity
  - Extensibility
* "Definition: Composition. Let c1 || c2 represent the concurrent composition..." (p.19)
* Actor languages uniformly use message-passing to spawn concurrency and are inherently parallel
* The problem of shared resources with changing local state is dealt with by providing an
  object-oriented environment without the sequential bottle-neck caused by assignment commands
* An actor language also provides a suitable basis for large-scale parallelism. Besides the
  ability to distribute the work required in the course of a computation, actor systems can be composed simply by passing messages between them. The internal workings of an actor system are not available to any other system
